# variables passed in by API:
# - Project
# - Repo
# - Branch
# - SolutionName
# - ServiceConnection
# - BuildDefinitionId
# - PipelineId
# - EnvironmentName
parameters:
- name: Branch
  type: string
- name: BranchToCreate
  type: string
  default: "Commit to existing branch specified in Branch parameter"
- name: CommitMessage
  type: string
- name: Data
  type: string
  default: "[]"
- name: Email
  type: string
- name: Project
  type: string
- name: Repo
  type: string
- name: ServiceConnectionName
  type: string
- name: ServiceConnectionUrl
  type: string
- name: SolutionName
  type: string
- name: UserName
  type: string
- name: PipelineId
  type: string
  default: "NA"
- name: EnvironmentName
  type: string
  default: "NA"
- name: BuildDefinitionId
  type: string
  default: "NA"
- name: ImportUnmanaged
  type: string
  default: "true"
- name: PortalSiteName
  type: string
  default: "NA"
- name: PublishCustomizations
  type: string
  default: "NA"
- name: CommitScope
  type: string
  default: "1"
- name: AgentPool
  type: string
  default: "Azure Pipelines"
- name: VMImage
  type: string
  default: "windows-latest"
trigger: none
pr: none
#You can use this sample template if you plan to store the pipeline templates in one repo and your pipeline YAML in another. This is useful for when you have multiple repos and don't want to maintain the templates in multiple places.'
resources:
  repositories:
  - repository: PipelineRepo  # repository name (DO NOT CHANGE THIS VALUE) 
    type: git
    ref: BranchContainingTheBuildTemplates  # If your pipeline templates are in a branch other than the default branch specify the branch here. Otherwise the default branch will be used by default.
    name: RepositoryContainingTheBuildTemplates  #This is the name of the repo in the current project in Azure Devops that has the pipeline templates. If the repo is in a different project you can specify the project and repo using the format ProjectContainingTheBuildTemplates/RepositoryContainingTheBuildTemplates (https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#type)

name: import-${{parameters.SolutionName}}

# NOTE: If you want to use different values for these variables, you can remove the variable group and attach them directly to this pipeline. The group specified below is a variable group defined in the Library for the Pipelines
variables:
- group: alm-accelerator-variable-group
- name: SolutionName
  value: 'SampleSolutionName' #Replace with the actual name of the solution you are building. (NOTE: Not the Display Name)

stages:
- stage: import_unmanaged_solution
  displayName: 'Import unmanaged solution' 
  jobs:
  - job: import_unmanaged_solution
  
    pool:
      ${{ if and(ne(parameters.AgentPool, 'NA'), ne(parameters.AgentPool, '')) }}:
        name: ${{parameters.AgentPool}}
      ${{ if and(ne(parameters.VMImage, 'NA'), ne(parameters.VMImage, '')) }}:
        vmImage: ${{parameters.VMImage}}
    steps:
    - checkout: PipelineRepo
      path: 'PipelineUtils'
      displayName: 'Checkout Pipeline Branch'

    - template: Pipelines\Templates\import-Solution-To-Dev-Environment.yml@PipelineRepo #The @PipelineRepo tells the pipeline where to look for the templates based on the name of the repo you specified above
      parameters:
        branch: ${{parameters.Branch}}
        project: ${{parameters.Project}}
        repo: ${{parameters.Repo}}
        serviceConnectionName: ${{parameters.ServiceConnectionName}}
        serviceConnectionUrl: ${{parameters.ServiceConnectionUrl}}
        solutionName: ${{parameters.SolutionName}}
        environmentName: ${{parameters.EnvironmentName}}
        importUnmanaged: ${{parameters.ImportUnmanaged}}