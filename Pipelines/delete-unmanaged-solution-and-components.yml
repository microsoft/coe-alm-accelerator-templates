# This pipeline gets triggered manually or via an API call.  
# It is a general purpose automation that allows you to delete or "clean up" an unmanaged solution from a Dataverse environment.
# It is a destructive action and will remove everything in the solution from the environment.
# If there are dependencies in other solutions on components in the solution you are trying to clean up / delete, the pipeline will fail.
# You need to clean up dependencies before running this pipeline.

# The following variables need to be set when the pipeline is queued to run:
# ServiceConnName
# SolutionName

trigger: none
pr: none

name: delete-unmanaged-$(SolutionName)-and-components-from-environment

variables:
- group: global-variable-group
- name: vmImage
  value: 'windows-2019'

jobs:
  - job: main  
    pool:
      vmImage: ${{ variables.vmImage }}
    steps:
    - checkout: none

    - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
      displayName: 'Power Platform Tool Installer '

    - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
      displayName: 'Export Solution as Managed'
      inputs:
        authenticationType: PowerPlatformSPN
        PowerPlatformSPN: '$(ServiceConnName)'
        SolutionName: '$(SolutionName)'
        Managed: true
        SolutionOutputFile: '$(build.binariesdirectory)\$(SolutionName).zip'

    - task: PowerPlatformDeleteSolution@0
      displayName: 'Power Platform Delete Unmanaged Solution (DOES NOT DELETE SOLUTION COMPONENTS)'
      inputs:
        authenticationType: PowerPlatformSPN
        PowerPlatformSPN: '$(ServiceConnName)'
        SolutionName: '$(SolutionName)'

    - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@0
      displayName: 'Import Managed Solution'
      inputs:
        authenticationType: PowerPlatformSPN
        PowerPlatformSPN: '$(ServiceConnName)'
        SolutionInputFile: '$(build.binariesdirectory)\$(SolutionName).zip'
        OverwriteUnmanagedCustomizations: true
        PublishWorkflows: false
        ConvertToManaged: true

    - powershell: |
        $errorMessage = "Since the import failed, your environment is in an unhealthy state. "
        $errorMessage = $errorMessage + "The unmanaged container is gone, but the unmanaged solution components still exist in the environment. "
        $errorMessage = $errorMessage + "Fix whatever is causing the import to fail, then you can resume this pipeline."
        echo "##[error]$errorMessage"
      displayName: 'Log error'
      condition: failed()

    - task: PowerPlatformDeleteSolution@0
      displayName: 'Power Platform Delete Managed Solution'
      inputs:
        authenticationType: PowerPlatformSPN
        PowerPlatformSPN: '$(ServiceConnName)'
        SolutionName: '$(SolutionName)'

  - job: waitForIntervention
    dependsOn: main
    condition: failed()
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 30
      inputs:
        instructions: 'Fix what caused the import to fail and resume'
        onTimeout: 'reject'
    
  - job: tryImportDeleteAgain
    dependsOn: waitForIntervention
    pool:
      vmImage: ${{ variables.vmImage }}
    steps:
    - checkout: none

    - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
      displayName: 'Power Platform Tool Installer '

    - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@0
      displayName: 'Import Managed Solution'
      inputs:
        authenticationType: PowerPlatformSPN
        PowerPlatformSPN: '$(ServiceConnName)'
        SolutionInputFile: '$(build.binariesdirectory)\$(SolutionName).zip'
        OverwriteUnmanagedCustomizations: true
        PublishWorkflows: false
        ConvertToManaged: true

    - powershell: |
        $errorMessage = "The import failed again."
        $errorMessage = $errorMessage + "Download the managed solution from the pipeline artifact.  You can use it to try to manually import the solution until you fix all the related issues. "
        $errorMessage = $errorMessage + "You can use it to try to manually import the solution until you fix all the related issues. "
        $errorMessage = $errorMessage + "Once you've manually imported it successfully, manually delete it."
        echo "##[error]$errorMessage"
      displayName: 'Log error'
      condition: failed()

    - task: PowerPlatformDeleteSolution@0
      displayName: 'Power Platform Delete Managed Solution'
      inputs:
        authenticationType: PowerPlatformSPN
        PowerPlatformSPN: '$(ServiceConnName)'
        SolutionName: '$(SolutionName)'