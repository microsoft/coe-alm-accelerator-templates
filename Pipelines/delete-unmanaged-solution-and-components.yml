# This pipeline gets triggered manually or via an API call.  
# It is a general purpose automation that allows you to delete or "clean up" an unmanaged solution from a Dataverse environment.
# It is a destructive action and will remove everything in the solution from the environment.
# If there are dependencies in other solutions on components in the solution you are trying to clean up / delete, the pipeline will fail.
# You need to clean up dependencies before running this pipeline.

# The following variables need to be set when the pipeline is queued to run:
# ServiceConnection
# SolutionName

parameters:
- name: Branch
  type: string
- name: BranchToCreate
  type: string
  default: "Commit to existing branch specified in Branch parameter"
- name: CommitMessage
  type: string
- name: Data
  type: string
  default: "[]"
- name: Email
  type: string
  default: "NA"
- name: Project
  type: string
  default: "NA"
- name: Repo
  type: string
  default: "NA"
- name: ServiceConnectionName
  type: string
- name: ServiceConnectionUrl
  type: string
- name: SolutionName
  type: string
- name: UserName
  type: string
  default: "NA"
- name: PipelineId
  type: string
  default: "NA"
- name: EnvironmentName
  type: string
  default: "NA"
- name: BuildDefinitionId
  type: string
  default: "NA"
- name: ImportUnmanaged
  type: string
  default: "NA"
- name: PortalSiteName
  type: string
  default: "NA"
- name: PublishCustomizations
  type: string
  default: "NA"
- name: CommitScope
  type: string
  default: "1"
trigger: none
pr: none

name: delete-unmanaged-${{parameters.SolutionName}}-and-components-from-environment

variables:
- group: alm-accelerator-variable-group
- name: vmImage
  value: 'windows-2022'

stages:
- stage: exportAndDeleteUnmanaged
  jobs:
    - job: exportAndDeleteUnmanaged  
      pool:
        vmImage: ${{ variables.vmImage }}
      steps:
      - checkout: none

      - template: Templates\set-service-connection-url.yml
        parameters:
          serviceConnectionName: ${{parameters.ServiceConnectionName}}
          serviceConnectionUrl: ${{parameters.ServiceConnectionUrl}}
      
      # Set pipeline vars for tools paths.
      - template: Templates\set-tools-paths.yml

      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
        displayName: 'Power Platform Tool Installer '

      # Before exporting the solution, publish solution customizations to ensure all the changes are exported
      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@2
        displayName: 'Publish Customizations'
        inputs:
          authenticationType: PowerPlatformSPN
          PowerPlatformSPN: ${{parameters.serviceConnectionName}}

      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@2
        displayName: 'Export Solution as Managed'
        inputs:
          authenticationType: PowerPlatformSPN
          PowerPlatformSPN: ${{parameters.ServiceConnectionName}}
          SolutionName: ${{parameters.SolutionName}}
          Managed: true
          SolutionOutputFile: '$(Pipeline.Workspace)\exported\${{parameters.SolutionName}}_managed.zip'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)\exported'
          artifact: 'drop'
          publishLocation: 'pipeline'

      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.delete-solution.PowerPlatformDeleteSolution@2
        displayName: 'Power Platform Delete Unmanaged Solution (DOES NOT DELETE SOLUTION COMPONENTS)'
        inputs:
          authenticationType: PowerPlatformSPN
          PowerPlatformSPN: ${{parameters.ServiceConnectionName}}
          SolutionName: ${{parameters.SolutionName}}

# If the import failed, we can't continue with the cleanup process. 
# A common cause of this is that a canvas app is still open in the studio and therefore import is blocked.
# To accomodate for import failures, we separate into two stages so we can rerun the import stage if it fails.
# This gives the maker an opportunity to resolve the issue, and rerun the second stage which will try to import/delete the managed solution again.
# Maker can continute to rerun the stage (trial/error) until there are no more import errors.

- stage: importAndDeleteManaged
  jobs:
    - job: importAndDeleteManaged  
      pool:
        vmImage: ${{ variables.vmImage }}
      steps:
      - checkout: none

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'drop'
          targetPath: '$(Pipeline.Workspace)\'

      # Set pipeline vars for tools paths.
      - template: Templates\set-tools-paths.yml

      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
        displayName: 'Power Platform Tool Installer '

      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@2
        displayName: 'Import Managed Solution'
        inputs:
          authenticationType: PowerPlatformSPN
          PowerPlatformSPN: ${{parameters.ServiceConnectionName}}
          SolutionInputFile: '$(Pipeline.Workspace)\${{parameters.SolutionName}}_managed.zip'
          OverwriteUnmanagedCustomizations: true
          PublishWorkflows: false
          ConvertToManaged: true

      - pwsh: |
          $errorMessage = "Since the import failed, your environment is in an unhealthy state. "
          $errorMessage = $errorMessage + "The unmanaged container is gone, but the unmanaged solution components still exist in the environment. "
          $errorMessage = $errorMessage + "Fix whatever is causing the import to fail, then you can rerun this stage."
          Write-Host "##vso[task.logissue type=error]$errorMessage"
          Write-Host "##[task.complete result=Failed]DONE"
        displayName: 'Log error'
        condition: failed()

      # Before deleting the solution, publish solution customizations to ensure all the changes are deleted
      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@2
        displayName: 'Publish Customizations'
        inputs:
          authenticationType: PowerPlatformSPN
          PowerPlatformSPN: ${{parameters.serviceConnectionName}}

      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.delete-solution.PowerPlatformDeleteSolution@2
        displayName: 'Power Platform Delete Managed Solution'
        inputs:
          authenticationType: PowerPlatformSPN
          PowerPlatformSPN: ${{parameters.ServiceConnectionName}}
          SolutionName: ${{parameters.SolutionName}}
