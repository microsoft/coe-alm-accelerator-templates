# variables passed in by API:
# - Project
# - Repo
# - Branch
# - SolutionName
# - ServiceConnection
# - BuildDefinitionId
# - PipelineId
#
# NOTE: If you want to use different values for these variables, you can remove the variable group and attach them directly to this pipeline.
variables:
- group: global-variable-group

name: import-$(SolutionName)

resources:
  repositories:
  - repository: PipelineRepo  # repository name (DO NOT CHANGE THIS VALUE) 
    type: git
    name: self  #This is the name of the repo in the current project in Azure Devops that has the pipeline templates. If the repo is in a different project you can specify the project and repo using the format ProjectContainingTheBuildTemplates/RepositoryContainingTheBuildTemplates (https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#type)

trigger: none
pr: none

pool:
  vmImage: 'windows-2019'

steps:
- powershell: |
    Write-Host "##vso[task.setvariable variable=RepoName]$(Repo)"
  displayName: 'Set Source Repo Name'

# Checkout our Branch
- checkout: git://$(Project)/$(Repo)@$(Branch)
  displayName: 'Checkout Source Branch'

# Get the solution package from artifact uploaded by the build pipeline
- template: Templates\build-Solution.yml
  parameters:
    buildUnmanaged: 'true'

- powershell: |
   Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Filter "$(SolutionName)*.zip" | 
   ForEach-Object {
       If (-Not $_.FullName.Contains("_managed")) 
       { 
         $unmanagedSolutionPath = $_.FullName 
       }
   }
   Write-Host "##vso[task.setVariable variable=UnmanagedSolutionPath]$unmanagedSolutionPath"
   Write-Host $unmanagedSolutionPath
  displayName: 'Get unmanaged solution zip path'

- template: Templates\deploy-Solution.yml
  parameters:
    serviceConnection: '$(ServiceConnection)'
    environmentVariables: '$(DevEnvironmentVariables)'
    connectionReferences: '$(DevConnectionReferences)'
    aadGroupTeamConfiguration: '$(DevAadGroupTeamConfiguration)'
    aadGroupCanvasConfiguration: '$(DevAadGroupCanvasConfiguration)'
    solutionComponentOwnershipConfiguration: '$(DevSolutionComponentOwnershipConfiguration)'
    importUnmanaged: 'true'
- template: Templates\update-canvas-app-ownership.yml
  parameters:
    serviceConnection: '$(ServiceConnection)'