parameters:
- name: serviceConnection
  type: string
- name: aadGroupCanvasConfiguration
  type: string  

steps:
- powershell: |
    . "$env:POWERSHELLPATH/canvas-unpack-pack.ps1"

    $skipShareError = $true
    # If 'FailPluginIfAppShareError' is passed, fail pipeline
    if(!'$(FailPluginIfAppShareError)'.Contains('$(')) {        
        $failPluginIfAppShareErrorValue = "$(FailPluginIfAppShareError)"
        if($failPluginIfAppShareErrorValue -eq 'true')
        {
            Write-Host "FailPluginIfAppShareError variable passed as true . Will fail the pipeline."
            $skipShareError = $false
        }else{
            Write-Host "FailPluginIfAppShareError variable passed as false . Will suppress the pipeline failure."
        }
    }
    try {
        Write-Host "SkipShareError - $skipShareError"
        Invoke-Share-Canvas-App-with-AAD-Group "$(CoETools_Microsoft_PowerApps_Administration_PowerShell)" "$(PowerAppsAdminModuleVersion)" "$(connectionVariables.BuildTools.TenantId)" "$(connectionVariables.BuildTools.ApplicationId)" "$(connectionVariables.BuildTools.ClientSecret)" "$(CoeTools_Microsoft_Xrm_Data_Powershell)" "$(XrmDataPowerShellVersion)" "${{parameters.serviceConnection}}" "${{parameters.aadGroupCanvasConfiguration}}" "$(BuildTools.EnvironmentId)" "$(connectionVariables.BuildTools.DataverseConnectionString)" $skipShareError
     } catch {
        Write-Host "##vso[task.logissue type=warning]Errors occurred while sharing the App. Please review the log for specific errors and verify your deployment configuration settings."
        Write-Host $_
        if ($skipShareError -eq $false) {
            Write-Host "Throwing exception - Main"
            exit 1
        }
    }
  displayName: 'Share Canvas App with AAD Group'
  condition: and(succeeded(), not(contains(variables['outAadGroupCanvasConfiguration'], '$(')))