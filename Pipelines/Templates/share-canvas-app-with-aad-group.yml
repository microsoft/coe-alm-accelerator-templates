parameters:
- name: serviceConnection
  type: string
- name: aadGroupCanvasConfiguration
  type: string  

steps:
- powershell: |
    $microsoftPowerAppsAdministrationPowerShellModule = '$(CoETools_Microsoft_PowerApps_Administration_PowerShell)'
    Import-Module $microsoftPowerAppsAdministrationPowerShellModule -Force -RequiredVersion $(PowerAppsAdminModuleVersion) -ArgumentList @{ NonInteractive = $true }
    Add-PowerAppsAccount -TenantID $(TenantId) -ApplicationId $(ClientId) -ClientSecret $(ClientSecret)
    $microsoftXrmDataPowerShellModule = '$(CoETools_Microsoft_Xrm_Data_PowerShell)'
    Import-Module $microsoftXrmDataPowerShellModule -Force -RequiredVersion $(XrmDataPowerShellVersion) -ArgumentList @{ NonInteractive = $true }
    $conn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"

    # json config value must follow this format
    #[
    #    {
    #        "aadGroupId": "aad-security-group-guid-1",
    #        "canvasNameInSolution": "pfx_app-name-in-solution-name-1",
    #        "roleName":"CanView or CanViewWithShare or CanEdit" 
    #    },
    #    {
    #        "aadGroupId": "aad-security-group-guid-2",
    #        "canvasNameInSolution": "pfx_app-name-in-solution-name-2",
    #        "roleName":"CanView or CanViewWithShare or CanEdit" 
    #    }
    #]
    $config = Get-Content '${{parameters.aadGroupCanvasConfiguration}}' | ConvertFrom-Json

    foreach ($c in $config){
        $aadGroupId = $c.aadGroupId
        $roleName = $c.roleName
        $canvasNameInSolution = $c.canvasNameInSolution     
        if($aadGroupId -ne '' -and $roleName -ne '' -and $canvasNameInSolution -ne '') {
            $canvasApps = Get-CrmRecords -conn $conn -EntityLogicalName canvasapp -FilterAttribute "name" -FilterOperator "eq" -FilterValue $canvasNameInSolution -Fields canvasappid
            if($canvasApps.Count -gt 0) {
                $appId = $canvasApps.CrmRecords[0].canvasappid
                $environmentId = "$(BuildTools.EnvironmentId)"
                Write-Host "Sharing app $appId with $aadGroupId"
                Set-AdminPowerAppRoleAssignment -PrincipalType Group -PrincipalObjectId $aadGroupId -RoleName $roleName -AppName $appId -EnvironmentName $environmentId
            }
            else {
                Write-Host "##vso[task.logissue type=warning]A specified canvas app was not found in the target environment. Verify your deployment configuration and try again."
            }
        }
    }
  displayName: 'Share Canvas App with AAD Group'
  condition: and(succeeded(), not(contains('${{parameters.aadGroupCanvasConfiguration}}', '$(')))