parameters:
- name: serviceConnection
  type: string
  default: ''
- name: connectionReferences
  type: string
  default: ''

steps:
# TEMPORARY WORKAROUND: Using a third party PowerShell library to update connection references.  Replace with official task when available.
# With the introduction of connection references, there are new APIs to map them during solution import. However, the official task doesn't support yet.
# For now, we will update them post import. This will result in Flows being in the off state.  As a temporary workaround until the APIs are
# incorporated into the solution import task, we will turn on all the Flows after connection references are updated.  
- powershell: |
    Import-Module Microsoft.PowerApps.Administration.PowerShell -Force -RequiredVersion $(PowerAppsAdminModuleVersion) -ArgumentList @{ NonInteractive = $true }
    Add-PowerAppsAccount -TenantID $(TenantId) -ApplicationId $(ClientId) -ClientSecret $(ClientSecret)
    Import-Module Microsoft.Xrm.Data.PowerShell -Force -RequiredVersion $(XrmDataPowerShellVersion) -ArgumentList @{ NonInteractive = $true }
    $conn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"
    $impersonationConn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"

    # Get the EnvironmentName (which is a GUID) of the environment based on the orgid in Dataverse
    $orgId = (Get-CrmRecords -conn $conn -EntityLogicalName organization).CrmRecords[0].organizationid
    
    $environmentName = "$(EnvironmentId)"
        
    $config = ConvertFrom-Json '${{parameters.connectionReferences}}'
    $connRefOwnerCollection = New-Object -TypeName System.Collections.Specialized.NameValueCollection
    foreach ($c in $config) {
      # Get the connection reference to update
      $connRefs = Get-CrmRecords -conn $conn -EntityLogicalName connectionreference -FilterAttribute "connectionreferencelogicalname" -FilterOperator "eq" -FilterValue $c[0]
      $connRef = $connRefs.CrmRecords[0]

      # Connection References can only be updated by an identity that has permissions to the connection it references
      # As of authoring this script, Service Principals (SPN) cannot update connection references
      # The temporary workaround is to impersonate the user that created the connection
      
      # Get connection
      $connections = Get-AdminPowerAppConnection -EnvironmentName $environmentName -Filter $c[1]
      # Get Dataverse systemuserid for the system user that maps to the aad user guid that created the connection 
      $systemusers = Get-CrmRecords -conn $conn -EntityLogicalName systemuser -FilterAttribute "azureactivedirectoryobjectid" -FilterOperator "eq" -FilterValue $connections[0].CreatedBy.id
      # Impersonate the Dataverse systemuser that created the connection when updating the connection reference
      $impersonationCallerId = $systemusers.CrmRecords[0].systemuserid
      $impersonationConn.OrganizationWebProxyClient.CallerId = $impersonationCallerId 
      $connRefOwnerCollection.Add($c[0],$impersonationCallerId)
      Set-CrmRecord -conn $impersonationConn -EntityLogicalName connectionreference -Id $connRef.connectionreferenceid -Fields @{"connectionid" = $c[1] }
    }

    $solutions = Get-CrmRecords -conn $conn -EntityLogicalName solution -FilterAttribute "uniquename" -FilterOperator "eq" -FilterValue "$(SolutionName)"
    $solutionId = $solutions.CrmRecords[0].solutionid

    $result = Get-CrmRecords -conn $conn -EntityLogicalName solutioncomponent -FilterAttribute "solutionid" -FilterOperator "eq" -FilterValue $solutionId -Fields objectid,componenttype
    $solutionComponents = $result.CrmRecords

    foreach ($c in $solutionComponents){
        if ($c.componenttype -eq "Workflow"){
            # Flows can only be turned on if the user turning them on has permissions to connections being referenced by the connection reference
            # As of authoring this script, the Service Principal (SPN) we use to connect to the Dataverse API cannot turn on the Flow
            # The temporary workaround is use a brute force approach for now.  We use the identity of the connection for the first connection
            # reference we find to turn on the Flow.  This may have side effects or unintended consequences we haven't fully tested.
            # Need a better long term solution.  Will replace when we find one.
            $wf = Get-CrmRecord -conn $conn -EntityLogicalName workflow -Id $c.objectid -Fields clientdata,category
            if ($wf.category -eq "Modern Flow"){
              $impersonationCallerId = ""
              foreach ($key in $connRefOwnerCollection.AllKeys){
                if($wf.clientdata.Contains($key)){
                  $impersonationCallerId = $connRefOwnerCollection[$key]
                  break
                }
              }
              if ($impersonationCallerId -ne "") {
                  $impersonationConn.OrganizationWebProxyClient.CallerId = $impersonationCallerId 
                  Set-CrmRecordState -conn $impersonationConn -EntityLogicalName workflow -Id $c.objectid -StateCode Activated -StatusCode Activated
              }
            }            
        }
    }
  displayName: 'Update Connection References'
  condition: and(succeeded(), ne('${{parameters.connectionReferences}}', ''))
