parameters:
- name: displayName
  type: string
- name: serviceConnection
  type: string
- name: solutionComponentOwnershipConfiguration
  type: string
- name: connectionReferences
  type: string
- name: activateFlowConfiguration
  type: string

steps:
# Enable a specific list of 'child' flows that must be turned on before their parent flows.
- powershell: |
    $microsoftXrmDataPowerShellModule = '$(CoETools_Microsoft_Xrm_Data_PowerShell)'
    Import-Module $microsoftXrmDataPowerShellModule -Force -RequiredVersion $(XrmDataPowerShellVersion) -ArgumentList @{ NonInteractive = $true }
    $conn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"

    $activationConfig = ConvertFrom-Json '${{parameters.activateFlowConfiguration}}'
    $activationConfig | Sort-Object [int]sortOrder

    # json config value must follow this format
    #[
    #    {
    #        "solutionComponentUniqueName":"workflowid",
    #        "activateAsUser": "username@yourdomain.com"
    #    },
    #    {
    #        "solutionComponentUniqueName":"workflowid",
    #        "activateAsUser": "username@yourdomain.com"
    #    }
    #]
    # Turn on specified list of flows using a specified user.
    # This should be an ordered list of flows that must be turned on before any other dependent (parent) flows can be turned on.
    # The remaining flows will be turned by the next following 'Enable flows based on connection references' task
    foreach ($activateConfig in $config){
        if($activateConfig.activateAsUser -ne '' -and $activateConfig.solutionComponentUniqueName -ne '' -and $activateConfig.activate -ne 'false'){
            $workflow = Get-CrmRecord -conn $conn -EntityLogicalName workflow -Id $activateConfig.solutionComponentUniqueName -Fields clientdata,category,statecode
            $systemuserResult = Get-CrmRecords -conn $conn -EntityLogicalName systemuser -FilterAttribute "internalemailaddress" -FilterOperator "eq" -FilterValue $activateConfig.activateAsUser -Fields systemuserid
            if($systemuserResult.Count -gt 0) {
                $systemUserId = $systemuserResult.CrmRecords[0].systemuserid

                #Activate the workflow using the owner.
                if($workflow.statecode_Property.Value -ne 1){
                    $impersonationConn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"
                    $impersonationCallerId = $systemUserId
                    $impersonationConn.OrganizationWebProxyClient.CallerId = $impersonationCallerId 
                    Write-Host "Activating Flow: " $activateConfig.solutionComponentName
                    Set-CrmRecordState -conn $impersonationConn -EntityLogicalName workflow -Id $activateConfig.solutionComponentUniqueName -StateCode 1 -StatusCode 2
                }
            }
            else {
                Write-Host "##vso[task.logissue type=warning]A specified user record was not found in the target environment. Verify your deployment configuration and try again."
            }
        }
    }
  displayName: 'Activate Flows for Configuration'
  condition: and(succeeded(), ne(variables['EnableFlows'], 'false'), ne('${{parameters.activateFlowConfiguration}}', ''))

# Enable flows based on connection references
# Flows can only be turned on if the user turning them on has permissions to connections being referenced by the connection reference
# As of authoring this script, the Service Principal (SPN) we use to connect to the Dataverse API cannot turn on the Flow
# The temporary workaround is use a brute force approach for now.  We use the identity of the connection for the first connection
# reference we find to turn on the Flow.  This may have side effects or unintended consequences we haven't fully tested.
# Need a better long term solution.  Will replace when we find one.
- powershell: |
    $microsoftPowerAppsAdministrationPowerShellModule = '$(CoETools_Microsoft_PowerApps_Administration_PowerShell)'
    Import-Module $microsoftPowerAppsAdministrationPowerShellModule -Force -RequiredVersion $(PowerAppsAdminModuleVersion) -ArgumentList @{ NonInteractive = $true }
    Add-PowerAppsAccount -TenantID $(TenantId) -ApplicationId $(ClientId) -ClientSecret $(ClientSecret)
    $microsoftXrmDataPowerShellModule = '$(CoETools_Microsoft_Xrm_Data_PowerShell)'
    Import-Module $microsoftXrmDataPowerShellModule -Force -RequiredVersion $(XrmDataPowerShellVersion) -ArgumentList @{ NonInteractive = $true }
    $conn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"
    $impersonationConn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"

    # Get the EnvironmentName (which is a GUID) of the environment based on the orgid in Dataverse
    $orgs = Get-CrmRecords -conn $conn -EntityLogicalName organization -Fields organizationid
    if($orgs.Count -gt 0) {
        $orgId = $orgs.CrmRecords[0].organizationid
    
        $environmentName = "$(EnvironmentId)"

        $solutions = Get-CrmRecords -conn $conn -EntityLogicalName solution -FilterAttribute "uniquename" -FilterOperator "eq" -FilterValue "$(SolutionName)" -Fields solutionid
        if($solutions.Count -gt 0) {

            $solutionId = $solutions.CrmRecords[0].solutionid

            $result = Get-CrmRecords -conn $conn -EntityLogicalName solutioncomponent -FilterAttribute "solutionid" -FilterOperator "eq" -FilterValue $solutionId -Fields objectid,componenttype
            $solutionComponents = $result.CrmRecords

            $config = ConvertFrom-Json '${{parameters.connectionReferences}}'

            # Retrieve the activation config to use when activating flows for connection references
            $activationConfigs = ConvertFrom-Json '${{parameters.activateFlowConfiguration}}'
            $activationConfigs | Sort-Object [int]sortOrder

            $flowsToActivate = [System.Collections.ArrayList]@()

            foreach ($connectionRefConfig in $config) {
                if($connectionRefConfig.LogicalName -ne '' -and $connectionRefConfig.ConnectionId -ne '') {
                    # Get the connection reference to update
                    $connRefs = Get-CrmRecords -conn $conn -EntityLogicalName connectionreference -FilterAttribute "connectionreferencelogicalname" -FilterOperator "eq" -FilterValue $connectionRefConfig.LogicalName
                    if($connRefs.Count -gt 0) {
                        $systemUserId = ""
                        $connRef = $connRefs.CrmRecords[0]
                        if(-Not [string]::IsNullOrWhiteSpace($connectionRefConfig.ConnectionOwner)) {
                            $systemUserId = $connectionRefConfig.ConnectionOwner
                        }
                        else {
                            # Get connection as a fallback if owner is not specified in the config. 
                            $connections = Get-AdminPowerAppConnection -EnvironmentName $environmentName -Filter $connectionRefConfig.ConnectionId
                            if($null -ne $connections) {
                                $systemUserId = $connections[0].CreatedBy.id
                            }
                        }
                        # Connection References can only be updated by an identity that has permissions to the connection it references
                        # As of authoring this script, Service Principals (SPN) cannot update connection references
                        # The temporary workaround is to impersonate the user that created the connection
      
                        if(-Not [string]::IsNullOrWhiteSpace($systemUserId)) {
                            # The ConnectionOwner variable may contain an email address - if so change the attribute we filter on
                            $filterAttribute = "azureactivedirectoryobjectid"
                            if($systemUserId -Match "@") {
                                $filterAttribute = "internalemailaddress"
                            }

                            # Get Dataverse systemuserid for the system user that maps to the aad user guid that created the connection 
                            $systemusers = Get-CrmRecords -conn $conn -EntityLogicalName systemuser -FilterAttribute $filterAttribute -FilterOperator "eq" -FilterValue $systemUserId
                            if($systemusers.Count -gt 0) {
                                # Impersonate the Dataverse systemuser that created the connection when updating the connection reference
                                $impersonationCallerId = $systemusers.CrmRecords[0].systemuserid

                                foreach ($solutionComponent in $solutionComponents){
                                    if ($solutionComponent.componenttype -eq "Workflow"){
                                        $workflow = Get-CrmRecord -conn $conn -EntityLogicalName workflow -Id $solutionComponent.objectid -Fields clientdata,category,statecode

                                        if($workflow -ne $null -and $workflow.clientdata -ne $null -and $workflow.clientdata.Contains($connectionRefConfig.LogicalName) -and $workflow.statecode_Property.Value -ne 1){
                                            Write-Host "Retrieving activation config"
                                            $activationConfig = $activationConfigs | Where-Object { $_.solutionComponentUniqueName -eq $solutionComponent.objectid } | Select-Object -First 1
                                            if($null -ne $activationConfig -and $activationConfig.activate -ne 'false') {
                                                Write-Host "Adding flow " $activationConfig.solutionComponentName " to activation collection"
                                                $flowActivation = [PSCustomObject]@{}
                                                $flowActivation | Add-Member -MemberType NoteProperty -Name 'solutionComponent' -Value $workflow
                                                $flowActivation | Add-Member -MemberType NoteProperty -Name 'impersonationCallerId' -Value $impersonationCallerId
                                                $flowActivation | Add-Member -MemberType NoteProperty -Name 'sortOrder' -Value $activationConfig.sortOrder
                                                $flowsToActivate.Add($flowActivation)
                                            }
                                            else {
                                                Write-Host "Excluding flow " $activationConfig.solutionComponentName "from activation collection"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            Write-Host "##vso[task.logissue type=warning]A specified connection was not found in the target environment. Verify your deployment configuration and try again."
                        }
                    }
                    else {
                        Write-Host "##vso[task.logissue type=warning]A specified connection reference was not found in the target environment. Verify your deployment configuration and try again."
                    }

                }
            }
            #Activate any flows added to the collection based on sort order
            $flowsToActivate | Sort-Object [int]sortOrder
            foreach($flowToActivate in $flowsToActivate) {
                Write-Host "Activating Flow: " $flowToActivate.solutionComponent.name
                $impersonationConn.OrganizationWebProxyClient.CallerId = $flowToActivate.impersonationCallerId 
                Set-CrmRecordState -conn $impersonationConn -EntityLogicalName workflow -Id $flowToActivate.solutionComponent.workflowid -StateCode 1 -StatusCode 2
            }
        }
    }
  displayName: 'Activate Flows for Connection References'
  condition: and(succeeded(), ne(variables['EnableFlows'], 'false'), ne('$(outConnectionReferences)', ''))

# Enable flows based on ownership
- template: update-solution-component-ownership.yml
  parameters:
    displayName: 'Activate Flows for Component Owners'
    serviceConnection: '${{parameters.serviceConnection}}'
    solutionComponentOwnershipConfiguration: '${{parameters.solutionComponentOwnershipConfiguration}}'
    activateFlowConfiguration: '${{parameters.activateFlowConfiguration}}'
    enableFlows: '$(EnableFlows)'
    updateComponentOnwership: 'false'

