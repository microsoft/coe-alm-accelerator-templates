#We are going to set websiteId as a pipeline variable only if there is a Power Page in the Dataverse

parameters:
- name: websiteId
  type: string
- name: repo
  type: string
- name: serviceConnectionUrl
  type: string
- name: serviceConnectionName
  type: string
- name: solutionName
  type: string
- name: websiteName
  type: string
- name: commitScope
  type: string
  default: '1'
- name: configurationData
  type: string
steps:
# ALM Accelerator currently supports ALM of single website.
# PowerPages folder contain one subfolder at depth 1, which is the unpacked WebSite folder.
# Check if unpacked website folder already exists; If exists Clean the folder in the next step
- pwsh: |
    . "$env:POWERSHELLPATH/portal-functions.ps1"
    $websiteName = Get-Website-Name "$(Build.SourcesDirectory)" "${{parameters.repo}}" "${{parameters.solutionName}}"
    echo "##vso[task.setvariable variable=WebsiteName]$websiteName"
    Write-Host "websiteName - $websiteName"
  displayName: "Fetch Portal Website Name"
  condition: and(succeeded(), ne(variables['websiteId'], 'NA'), ne('${{parameters.commitScope}}', '3'))

# Remove the existing website folder in case websiteId is "NA"
- pwsh: |
    . "$env:POWERSHELLPATH/portal-functions.ps1"
    Clean-Website-Folder "$(Build.SourcesDirectory)" "${{parameters.repo}}" "${{parameters.solutionName}}"
  displayName: 'Clear Download Folder'
  condition: and(succeeded(), eq(variables['websiteId'], 'NA'), ne('${{parameters.commitScope}}', '3'))

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.download-paportal.PowerPlatformDownloadPaportal@2
  displayName: 'Export Power Page ${{parameters.solutionName}} from ${{parameters.serviceConnectionUrl}}'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
    Environment: '${{parameters.serviceConnectionUrl}}'
    DownloadPath: '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\PowerPages\'
    WebsiteId: ${{parameters.websiteId}}
    Overwrite: true
  condition: and(succeeded(), ne(variables['websiteId'], 'NA'), ne('${{parameters.commitScope}}', '3'))

# Logic to read and set deployment profiles yml files under .\PowerPages\Websitename\deployment-profiles
- pwsh: |
    . "$env:POWERSHELLPATH/portal-functions.ps1"
    . "$env:POWERSHELLPATH/dataverse-webapi-functions.ps1"
    $websiteName = Get-Website-Name "$(Build.SourcesDirectory)" "${{parameters.repo}}" "${{parameters.solutionName}}"
    Write-Host "websiteName - $websiteName"
    . "$env:POWERSHELLPATH/update-deployment-settings.ps1"
    Set-PortalSettings-Files "$(Build.SourcesDirectory)" "${{parameters.repo}}" "${{parameters.serviceConnectionUrl}}" "${{parameters.solutionName}}" "$websiteName" "$env:MAPPED_SPN_Token"

    #Read-File-Content "$env:MAPPED_SPN_Token" "$dataverseHost" "cat_portalsettingfile" "f56e384b-5ea1-ed11-aad1-000d3a32af20"

  env:
    DEPLOYMENT_SETTINGS: ${{parameters.configurationData}}
    MAPPED_SPN_Token: $(SpnToken)
  displayName: 'Fetch and set deployment profiles'
  condition: and(succeeded(), ne(variables['websiteId'], 'NA'), ne('${{parameters.commitScope}}', '3'))