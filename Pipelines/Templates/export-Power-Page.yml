#We are going to set websiteId as a pipeline variable only if there is a Power Page in the Dataverse

parameters:
- name: websiteId
  type: string
- name: repo
  type: string
- name: serviceConnectionUrl
  type: string
- name: serviceConnectionName
  type: string
  #In case of exporting Power Page, we expect that the solution unique name will be the same as the Power Page name
- name: solutionName
  type: string

steps:
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
  displayName: 'Power Platform Tool Installer'
  condition: and(succeeded(), ne(variables['websiteId'], ''))
 
#TODO Because the override flag is not exposed yet in tools, so we need to clear the folder manually
- powershell: |
    if(Test-Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\PowerPages\${{parameters.solutionName}}"){
      Remove-Item "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\PowerPages\${{parameters.solutionName}}\*" -Recurse -Force
    }
  displayName: 'Clear Download Folder'
  condition: and(succeeded(), ne(variables['websiteId'], ''))

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.download-paportal.PowerPlatformDownloadPaportal@2
  displayName: 'Export Power Page ${{parameters.solutionName}} from ${{parameters.serviceConnectionUrl}}'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
    Environment: '${{parameters.serviceConnectionUrl}}'
    DownloadPath: '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\PowerPages\'
    WebsiteId: ${{parameters.websiteId}}
  condition: and(succeeded(), ne(variables['websiteId'], ''))