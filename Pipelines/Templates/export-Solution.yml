# Project: The name of the Azure DevOps Project to which we are exporting our solution.
# Repo: The name of the Azure DevOps Repo to which we are exporting our solution.
# Branch: The name of the Azure DevOps Branch in the Repo above to which we are exporting our solution.
# BranchToCreate: The name of the new Azure DevOps Branch to create in the Repo above to which we are exporting our solution (Optional).
# CommitMessage: The commit message for this commit.
# Email: The email of the user performing the commit.
# .serviceConnection: The name of the service connection to Power Platform from which we'll be pulling the solution.
# SolutionName: The name of the solution being exported (i.e. Not the Display Name).
# UserName: The Display name of the user performing the commit.
parameters:
- name: gitAccessUrl
  type: string
  default: ''
- name: project
  type: string
  default: ''
- name: repo
  type: string
  default: ''
- name: branch
  type: string
  default: ''
- name: branchToCreate
  type: string
  default: ''
- name: commitMessage
  type: string
  default: ''
- name: email
  type: string
  default: ''
- name: serviceConnectionName
  type: string
  default: ''
- name: serviceConnectionUrl
  type: string
  default: ''
- name: solutionName
  type: string
  default: ''
- name: userName
  type: string
  default: ''
- name: configurationData
  type: string
  default: ''
steps:
- template: Hooks\export-solution-pre-hook.yml

- template: set-service-connection-url.yml
  parameters:
    serviceConnectionName: '${{parameters.serviceConnectionName}}'
    serviceConnectionUrl: '${{parameters.serviceConnectionUrl}}'

- template: set-spn-token.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
# Set pipeline vars for tools paths.
- template: set-tools-paths.yml

# Restore PowerShell Module dependencies if available in cache
# https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
- task: Cache@2
  displayName: Cache Powershell Modules
  inputs:
    key:  restoremodules | "$(powerPlatformToolsSubPath)" | $(Pipeline.Workspace)/PipelineUtils/Pipelines/Templates/install-powershell-modules.yml
    path: $(powerPlatformToolsPath)
    cacheHitVar: powerPlatformToolsPath_IsCached

# Configure email/name and checkout git branch
- script: |
   git config user.email "${{parameters.email}}"
   git config user.name "${{parameters.userName}}"
   git checkout origin/${{parameters.branch}} --track
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Initialize Git'

# If the BranchToCreate variable *does not* contain an empty string, then
# create a branch based on BranchToCreate variable value and checkout that branch.
- script: |
   git checkout -b ${{parameters.branchToCreate}} ${{parameters.branch}}
  displayName: 'Create New Git Branch: ${{parameters.branchToCreate}}'
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  condition: and(succeeded(), ne('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is passed for the BranchToCreate variable, then skip this task

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'

- template: install-powershell-modules.yml

# Before exporting the solution, publish solution customizations to ensure all the changes are exported
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@0
  displayName: 'Publish Customizations'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: ${{parameters.serviceConnectionName}}

# Export both unmanaged and managed to put into source control
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
  displayName: 'Export Unmanaged Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: ${{parameters.serviceConnectionName}}
    SolutionName: '${{parameters.solutionName}}'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}.zip'

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
  displayName: 'Export Managed Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: ${{parameters.serviceConnectionName}}
    SolutionName: '${{parameters.solutionName}}'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}_managed.zip'
    Managed: true

- template: Hooks\export-solution-unpack-pre-hook.yml

# Unpack contents of solution to make the contents source control friendly 
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.unpack-solution.PowerPlatformUnpackSolution@0
  displayName: 'Power Platform Unpack Solution'
  inputs:
    SolutionInputFile: '$(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}.zip'
    SolutionTargetFolder: '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage'
    SolutionType: Both

- template: Hooks\export-solution-manipulate-pre-hook.yml

- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\**\Solution.xml" | 
   ForEach-Object {
        (Get-Content $_.FullName) `
            -replace '<Version>[\s\S]*?<\/Version>', '<Version>0.0.0.0</Version>' |
        Out-File $_.FullName
   }
  displayName: 'Update Solution XML with Build Number'

- pwsh: |
    #Set variable to continue on unpack error for use in the next two steps
    if('$(ContinueOnCanvasUnpackError)'.Contains("ContinueOnCanvasUnpackError")) {
        Write-Host "##vso[task.setvariable variable=ContinueOnCanvasUnpackError]false"
    }
  displayName: Check for Continue on Canvas Unpack Error


# Unpack source files into a folder
- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}" -Recurse -Filter *.msapp | 
   ForEach-Object {
        $unpackedPath = $_.FullName.Replace(".msapp", "_msapp_src")
        #Temporarily unpacking with latest version of Power Apps Language Tooling
        Write-Host "Unpacking via PowerShell"
        . "$env:POWERSHELLPATH/canvas-unpack-pack.ps1"
        Invoke-CanvasUnpackPack "unpack" $_.FullName $unpackedPath
       
        del $_.FullName
   }
  displayName: 'Unpack msapp files fail on error'
  enabled: true
  workingDirectory: $(PowerShellPath)
  condition: and(succeeded(), ne(variables.ContinueOnCanvasUnpackError, 'true'))

# Unpack source files into a folder
- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}" -Recurse -Filter *.msapp | 
   ForEach-Object {
        $unpackedPath = $_.FullName.Replace(".msapp", "_msapp_src")
        #Temporarily unpacking with latest version of Power Apps Language Tooling
        Write-Host "Unpacking via PowerShell"
        . "$env:POWERSHELLPATH/canvas-unpack-pack.ps1"
        Invoke-CanvasUnpackPack "unpack" $_.FullName $unpackedPath

        if( -not $?)
        {
            $msg = $Error[0].Exception.Message
            Write-Host "##vso[task.logissue type=warning]Failed to unpack $_.FullName. The msapp file will be preserved until this issue is resolved."
        }
        else
        {
            del $_.FullName
        }
   }
  displayName: 'Unpack msapp files continue on error'
  enabled: true
  continueOnError: true
  workingDirectory: $(PowerShellPath)
  condition: and(succeeded(), eq(variables.ContinueOnCanvasUnpackError, 'true'))


# TEMPORARY until Solution export supports not exporting custom connector configurations
# We need to clear out the contents of any *_connectionparameters.json file.  This is to ensure those valuse
# are not overwritten when the Solution is imported to a downstream environment.
- pwsh: |   
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}" -Recurse -Filter *_connectionparameters.json | 
   ForEach-Object {
      Clear-Content $_.FullName
   }
  displayName: 'Clear contents of *_connectionparameters.json files'
  enabled: true

- pwsh: |
    if (Test-Path $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}_managed.zip) {
        Remove-Item $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}_managed.zip
    }
    if (Test-Path $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}.zip) {
        Remove-Item $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}.zip
    }
  displayName: 'Delete solution zip files'
  enabled: true
  
# TEMPORARY until SolutionPackager supports formatting json files on unpack we
# update all the json files to be pretty-print / formatted so they are easier to read in source control.
# This also makes it easier to read changes from one commit to another
- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage" -Recurse -Filter *.json | 
   ForEach-Object {
    #skip canvas app and workflows folder because canvas and flows team already handles this
     if(-not $_.FullName.Contains('CanvasApps') -and -not $_.FullName.Contains('Workflows')) {
       Write-Host $_.FullName
       $formatted = jq . $_.FullName --sort-keys
       $formatted | Out-File $_.FullName -Encoding UTF8
     }
   }
  displayName: 'Format JSON files'
  enabled: true
  
# TEMPORARY until solution exports new business rules with non-empty GUIDs
# We need to set empty GUIDs output when a business rule is first exported.  This is to ensure that
# there aren't noisy diffs when the business rule is subsequently imported and exported.
- pwsh: |
   # Regex to extract GUID from the end of the filename
   $reGuid = '(([0-9a-f]){8}-([0-9a-f]){4}-([0-9a-f]){4}-([0-9a-f]){4}-([0-9a-f]){12})\.xaml$'
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\Workflows" -Recurse -File -Filter *.xaml | 
     Select-String 'XrmWorkflow00000000000000000000000000000000' -List | 
     Select-Object Path,Filename |
     ForEach-Object {
       $fileToFix = $_.Path
       if ($fileToFix -match $reGuid) {
         Write-Host "Fixing unset GUIDs in BR" $_.Filename
         # Use the GUID extracted from the filename to replace the empty GUIDs in the XAML content
         $guid = 'XrmWorkflow' + $matches[1].ToLower().Replace('-', '')
         ((Get-Content -path $fileToFix -Raw) -replace 'XrmWorkflow00000000000000000000000000000000', $guid) |
           Set-Content -NoNewLine -Path $fileToFix
       }
     }
  displayName: 'Fix unset GUIDs in new Business Rules'

- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\environmentvariabledefinitions" -Recurse -Filter environmentvariablevalues.json | Remove-Item
  displayName: 'Verify Environment Variable Current Value Not Exported'
  condition: and(succeeded(), eq(variables.DoNotExportCurrentEnvironmentVariableValues, 'true'))

# Set paths to deployment settings
- template: set-deployment-configuration-paths.yml
  parameters:
    configPath: '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\config\'
    environmentName: ''

- template: Hooks\export-solution-update-deploymentsettings-pre-hook.yml

# Update deployment settings configuration
- template: update-deployment-settings.yml
  parameters:
    orgUrl: '$(System.TeamFoundationCollectionUri)'
    projectName: '${{parameters.project}}'
    repo: '${{parameters.repo}}'
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    solutionName: '${{parameters.solutionName}}'
    configurationData: '${{parameters.configurationData}}'
    generateEnvironmentVariables: $(DeploymentSettings.GenerateEnvironmentVariables)
    generateConnectionReferences: $(DeploymentSettings.GenerateConnectionReferences)
    generateFlowConfig: $(DeploymentSettings.GenerateFlowOwnership)
    generateCanvasSharingConfig: $(DeploymentSettings.GenerateCanvasAppSharing)
    generateAADGroupTeamConfig: $(DeploymentSettings.GenerateAADGroupTeam)
    generateCustomConnectorConfig: $(DeploymentSettings.GenerateCustomConnectorConfig)

# Enabled or Disable Flows in the Solution based on configuration
- template: enable-disable-solution-flows.yml
  parameters:
    buildSourceDirectory: '$(Build.SourcesDirectory)'
    repo: '${{parameters.repo}}'
    solutionName: '${{parameters.solutionName}}'
    disableAllFlows: '$(DisableFlows)'
    activateFlowConfiguration: '$(outActivateFlows)'

# Set deployment variable for default environment variables
- template: set-deployment-variable.yml
  parameters:
    variableName: 'outDefaultEnvironmentVariables'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'DefaultEnvironmentVariables'
    displayName: 'Retrieve Default Environment Variable Config for Export'

- pwsh: |
   if('$(outDefaultEnvironmentVariables)' -ne '') {
       $config = ConvertFrom-Json '$(outDefaultEnvironmentVariables)'
       foreach ($c in $config) {
           $envVariableName = $c[0]
           Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\environmentvariabledefinitions\$envVariableName\environmentvariabledefinition.xml" | 
           ForEach-Object {
             $xml=[xml](Get-Content $_.FullName)
             $definitionNode = $xml.SelectSingleNode("//environmentvariabledefinition")
             $valueExists = $definitionNode.defaultvalue
             if($valueExists){
                $definitionNode.defaultvalue = $c[1]
             }
             else {
                $defaultValue = $xml.CreateElement("defaultvalue")
                $defaultValue.InnerText = $c[1]
                $definitionNode.AppendChild($defaultValue)
             }
             $xml.Save($_.FullName)
        }
       }
    }
  displayName: 'Verify Default Environment Variables Are Set'
  condition: and(succeeded(), eq(variables.VerifyDefaultEnvironmentVariableValues, 'true'))

- template: Hooks\export-solution-commit-pre-hook.yml

- pwsh: |
    git add --all
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Add Changes to Git Branch'

# Commit all changes to Git branch. If there are no changes we want to warn the user that there was nothing to commit. As this could mean there was a user error involved.
- pwsh: |
    $gitStatus = iex "git status --porcelain"
    if ($gitStatus) {
        git commit -m "${{parameters.commitMessage}}"
    }
    else {
        Write-Host "##vso[task.logissue type=warning]There is nothing to commit. No changes have been made since the previous commit. If this is unexpected make sure your changes have been published before committing again."
        exit 1;
    }
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Commit Changes to Git Branch'
  continueOnError: true
  
# If BranchToCreate variable value is '', then push to the branch specified in the Branch variable
- script: |
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.branch}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branch}} Remote Branch'
  condition: and(eq('${{parameters.gitAccessUrl}}', ''), succeeded(), eq('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is not '', then push to the branch specified in the BranchToCreate variable
- script: |
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.branchToCreate}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branchToCreate}} Remote Branch'
  condition: and(eq('${{parameters.gitAccessUrl}}', ''), succeeded(), ne('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is not passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is '', then push to the branch specified in the BranchToCreate variable
- script: |
   git remote set-url origin ${{parameters.gitAccessUrl}}
   git push origin ${{parameters.branch}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branchToCreate}} Remote Branch'
  condition: and(ne('${{parameters.gitAccessUrl}}', ''), succeeded(), eq('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is not '', then push to the branch specified in the BranchToCreate variable
- script: |
   git remote set-url origin ${{parameters.gitAccessUrl}}
   git push origin ${{parameters.branchToCreate}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branchToCreate}} Remote Branch'
  condition: and(ne('${{parameters.gitAccessUrl}}', ''), succeeded(), ne('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is not passed for the BranchToCreate variable, then run this task

- template: Hooks\export-solution-post-hook.yml