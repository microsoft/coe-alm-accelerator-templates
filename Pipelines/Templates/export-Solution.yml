# Project: The name of the Azure DevOps Project to which we are exporting our solution.
# Repo: The name of the Azure DevOps Repo to which we are exporting our solution.
# Branch: The name of the Azure DevOps Branch in the Repo above to which we are exporting our solution.
# BranchToCreate: The name of the new Azure DevOps Branch to create in the Repo above to which we are exporting our solution (Optional).
# CommitMessage: The commit message for this commit.
# Email: The email of the user performing the commit.
# ServiceConnection: The name of the service connection to Power Platform from which we'll be pulling the solution.
# SolutionName: The name of the solution being exported (i.e. Not the Display Name).
# TriggerSolutionUpgrade: A flag to determine if a subsequent Pull Request will perform an upgrade in the target environment.
# UserName: The Display name of the user performing the commit.
parameters:
- name: GitAccessUrl
  type: string
  default: ''
- name: Project
  type: string
  default: ''
- name: Repo
  type: string
  default: ''
- name: Branch
  type: string
  default: ''
- name: BranchToCreate
  type: string
  default: ''
- name: CommitMessage
  type: string
  default: ''
- name: Email
  type: string
  default: ''
- name: ServiceConnection
  type: string
  default: ''
- name: SolutionName
  type: string
  default: ''
- name: TriggerSolutionUpgrade
  type: string
  default: ''
- name: UserName
  type: string
  default: ''
steps:

# Configure email/name and checkout git branch
- script: |
   git config user.email "${{parameters.Email}}"
   git config user.name "${{parameters.UserName}}"
   git checkout origin/${{parameters.Branch}} --track
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Initialize Git'

# If the BranchToCreate variable *does not* contain an empty string, then
# create a branch based on BranchToCreate variable value and checkout that branch.
- script: |
   git checkout -b ${{parameters.BranchToCreate}} ${{parameters.Branch}}
  displayName: 'Create New Git Branch: ${{parameters.BranchToCreate}}'
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  condition: and(succeeded(), ne(variables.BranchToCreate, '')) # If an empty value is passed for the BranchToCreate variable, then skip this task

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'

# Before exporting the solution, publish solution customizations to ensure all the changes are exported
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@0
  displayName: 'Publish Customizations'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.ServiceConnection}}'

# Export both unmanaged and managed to put into source control
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
  displayName: 'Export Unmanaged Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.ServiceConnection}}'
    SolutionName: '${{parameters.SolutionName}}'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\${{parameters.SolutionName}}.zip'

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
  displayName: 'Export Managed Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.ServiceConnection}}'
    SolutionName: '${{parameters.SolutionName}}'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\${{parameters.SolutionName}}_managed.zip'
    Managed: true

# Unpack contents of solution to make the contents source control friendly 
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.unpack-solution.PowerPlatformUnpackSolution@0
  displayName: 'Power Platform Unpack Solution'
  inputs:
    SolutionInputFile: '$(Build.ArtifactStagingDirectory)\${{parameters.SolutionName}}.zip'
    SolutionTargetFolder: '$(Build.SourcesDirectory)\${{parameters.Repo}}\${{parameters.SolutionName}}\SolutionPackage'
    SolutionType: Both

# Solution version in source control is not used.  We create the solution version at build time from the current build number.  
# Therefore, we will zero out the solution version in source control.
- task: knom.regexreplace-task.regex-replace.RegexReplace@3
  displayName: 'Update Solution XML with Build Number'
  inputs:
    InputSearchPattern: |
      $(Build.SourcesDirectory)\${{parameters.Repo}}\${{parameters.SolutionName}}\SolutionPackage\**\Solution.xml
    FindRegex: '<Version>[\s\S]*?<\/Version>'
    ReplaceRegex: '<Version>0.0.0.0</Version>'

# Use temp exe from PowerShell to unpack source files into a folder
- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.Repo}}\${{parameters.SolutionName}}" -Recurse -Filter *.msapp | 
   ForEach-Object {
      $unpackedPath = $_.FullName.Replace(".msapp", "_msapp_src")
      $(Pipeline.Workspace)\PipelineUtils\Pipelines\temp-canvas-packager\temp-canvas-packager.exe -unpack $_.FullName $unpackedPath
      del $_.FullName
   }
  displayName: 'unpack msapp files'
  enabled: true

# Solution xml sometimes still shows noisy diffs.  So we format the xml to prevent noisy diffs.
- powershell: |
    Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.Repo}}\${{parameters.SolutionName}}" -Recurse -Filter *.xml | 
    ForEach-Object {
      [xml]$xml = Get-Content $_.FullName

      # function SortChildNodes($node, $depth = 0, $maxDepth = 20) {
      #   if ($node.HasChildNodes -and $depth -lt $maxDepth) {
      #     foreach ($child in $node.ChildNodes) {
      #       SortChildNodes $child ($depth + 1) $maxDepth
      #     }
      #   }

      #   $sortedAttributes = $node.Attributes | Sort-Object { $_.Name }
      #   $sortedChildren = $node.ChildNodes | Sort-Object { $_.OuterXml }

      #   $node.RemoveAll()

      #   foreach ($sortedAttribute in $sortedAttributes) {
      #     [void]$node.Attributes.Append($sortedAttribute)
      #   }

      #   foreach ($sortedChild in $sortedChildren) {
      #     [void]$node.AppendChild($sortedChild)
      #   }
      # }

      # SortChildNodes $xml.DocumentElement

      # $xml.Save($_.FullName)
    }
  displayName: 'Format xml files'
  enabled: true

# TEMPORARY until SolutionPackager supports formatting json files on unpack we
# update all the json files to be pretty-print / formatted so they are easier to read in source control.
# This also makes it easier to read changes from one commit to another
- powershell: |
   Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile  jq.exe
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.Repo}}\${{parameters.SolutionName}}" -Recurse -Filter *.json | 
   ForEach-Object {
       $formatted = .\jq.exe . $_.FullName --sort-keys
       $formatted | Out-File $_.FullName -Encoding UTF8
   }
   del jq.exe
   del $(Build.ArtifactStagingDirectory)\${{parameters.SolutionName}}.zip
   del $(Build.ArtifactStagingDirectory)\${{parameters.SolutionName}}_managed.zip
  displayName: 'Format JSON files'
  enabled: true

- powershell: |
    git add --all
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Add Changes to Git Branch'

# Commit all changes to Git branch. If there are no changes we want to warn the user that there was nothing to commit. As this could mean there was a user error involved.
- powershell: |
    $gitStatus = iex "git status --porcelain"
    if ($gitStatus) 
    {
        git commit -m "$(CommitMessage)"
    }
    else 
    {
        Write-Host "##vso[task.logissue type=warning]There is nothing to commit. No changes have been made since the previous commit. If this is unexpected make sure your changes have been published before committing again."
        exit 1;
    }
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Commit Changes to Git Branch'
  continueOnError: true
  
# If BranchToCreate variable value is '', then push to the branch specified in the Branch variable
- script: |
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.Branch}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Push to $(Branch) Local Branch'
  condition: and(eq('${{parameters.GitAccessUrl}}', ''), succeeded(), eq(variables.BranchToCreate, '')) # If an empty value is passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is not '', then push to the branch specified in the BranchToCreate variable
- script: |
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.BranchToCreate}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Push to ${{parameters.BranchToCreate}} Local Branch'
  condition: and(eq('${{parameters.GitAccessUrl}}', ''), succeeded(), ne(variables.BranchToCreate, '')) # If an empty value is not passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is not '', then push to the branch specified in the BranchToCreate variable
- script: |
   git remote set-url origin ${{parameters.GitAccessUrl}}
   git push origin ${{parameters.Branch}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Push to ${{parameters.BranchToCreate}} Remote Branch'
  condition: and(ne('${{parameters.GitAccessUrl}}', ''), succeeded(), eq(variables.BranchToCreate, '')) # If an empty value is not passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is not '', then push to the branch specified in the BranchToCreate variable
- script: |
   git remote set-url origin ${{parameters.GitAccessUrl}}
   git push origin ${{parameters.BranchToCreate}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Push to ${{parameters.BranchToCreate}} Remote Branch'
  condition: and(ne('${{parameters.GitAccessUrl}}', ''), succeeded(), ne(variables.BranchToCreate, '')) # If an empty value is not passed for the BranchToCreate variable, then run this task

# Task below saves the value of the TriggerSolutionUpgrade variable to a json file which will be read by the build that kicks off after code is committed to the branch.
- task: nkdagility.variablehydration.variabledehydration-task.variabledehydration@0
  displayName: 'Save Build Variable TriggerSolutionUpgrade'
  inputs:
    prefixes: TRIGGERSOLUTIONUPGRADE

# Since we are saving the value of the TriggerSolutionUpgrade variable to a json file, we need to publish it as an artifact to be picked up by the build that kicks off after 
# code is committed to the branch 
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: drop

# Since this is a general purpose pipeline that can be used to commit any solution package to a git branch, we need to tag it so the builds trigger by changes made to each 
# solution picks up the right artifact containing the TriggerSolutionUpgrade variable value 
- task: tagBuildOrRelease@0
  inputs:
    type: 'Build'
    tags: '${{parameters.SolutionName}}'
