# Project: The name of the Azure DevOps Project to which we are exporting our solution.
# Repo: The name of the Azure DevOps Repo to which we are exporting our solution.
# Branch: The name of the Azure DevOps Branch in the Repo above to which we are exporting our solution.
# BranchToCreate: The name of the new Azure DevOps Branch to create in the Repo above to which we are exporting our solution (Optional).
# CommitMessage: The commit message for this commit.
# Email: The email of the user performing the commit.
# .serviceConnection: The name of the service connection to Power Platform from which we'll be pulling the solution.
# SolutionName: The name of the solution being exported (i.e. Not the Display Name).
# UserName: The Display name of the user performing the commit.
parameters:
- name: gitAccessUrl
  type: string
  default: ''
- name: project
  type: string
  default: ''
- name: repo
  type: string
  default: ''
- name: branch
  type: string
  default: ''
- name: branchToCreate
  type: string
  default: ''
- name: commitMessage
  type: string
  default: ''
- name: email
  type: string
  default: ''
- name: serviceConnectionName
  type: string
  default: ''
- name: serviceConnectionUrl
  type: string
  default: ''
- name: solutionName
  type: string
  default: ''
- name: userName
  type: string
  default: ''
- name: configurationData
  type: string
  default: ''
- name: portalSiteName
  type: string
  default: ''
steps:
- template: set-service-connection-url.yml
  parameters:
    serviceConnectionName: '${{parameters.serviceConnectionName}}'
    serviceConnectionUrl: '${{parameters.serviceConnectionUrl}}'

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
  displayName: 'Install Power Platform Build Tools'

# Use set-connection-variables task to get values from AzDO Service Connection to be used in scripts that don't use tasks
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.set-connection-variables.PowerPlatformSetConnectionVariables@2
  displayName: 'Set Connection Variables'
  name: connectionVariables
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'

- template: set-spn-token.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    tenantId: $(connectionVariables.BuildTools.TenantId)
    clientId: $(connectionVariables.BuildTools.ApplicationId)
    clientSecret: $(connectionVariables.BuildTools.ClientSecret)

- pwsh: |
    . "$env:POWERSHELLPATH/load-save-pipeline-parameters.ps1"
    Write-Export-Pipeline-Parameters "$(Agent.BuildDirectory)\export-pipeline-parameters.json" "${{ parameters.gitAccessUrl }}" "${{ parameters.project }}" "${{ parameters.repo }}" "${{ parameters.branch }}" "${{ parameters.branchToCreate }}" "${{ parameters.commitMessage }}" "${{ parameters.email }}" "${{ parameters.serviceConnectionName }}" "${{ parameters.serviceConnectionUrl }}" "${{ parameters.solutionName }}" "${{ parameters.userName }}"
  env:
    DEPLOYMENT_SETTINGS: ${{parameters.configurationData}}
  displayName: 'Saving Export Pipeline Parameters'

- template: Hooks\export-solution-pre-hook.yml

# Set pipeline vars for tools paths.
- template: set-tools-paths.yml

# Restore PowerShell Module dependencies if available in cache
# https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
- task: Cache@2
  displayName: Cache Powershell Modules
  inputs:
    key:  restoremodules | "$(powerPlatformToolsSubPath)" | $(Pipeline.Workspace)/PipelineUtils/Pipelines/Templates/install-powershell-modules.yml
    path: $(powerPlatformToolsPath)
    cacheHitVar: powerPlatformToolsPath_IsCached

# Configure email/name and checkout git branch
- script: |
   git config user.email "${{parameters.email}}"
   git config user.name "${{parameters.userName}}"
   git checkout origin/${{parameters.branch}} --track
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Initialize Git'

# If the BranchToCreate variable *does not* contain an empty string, then
# create a branch based on BranchToCreate variable value and checkout that branch.
- script: |
   git checkout -b ${{parameters.branchToCreate}} ${{parameters.branch}}
  displayName: 'Create New Git Branch: ${{parameters.branchToCreate}}'
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  condition: and(succeeded(), ne('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is passed for the BranchToCreate variable, then skip this task

- template: install-powershell-modules.yml

# Before exporting the solution, publish solution customizations to ensure all the changes are exported
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@2
  displayName: 'Publish Customizations'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: ${{parameters.serviceConnectionName}}
  condition: and(succeeded(), ne(variables.PublishCustomizationsBeforeExport, 'false'))

- pwsh: |
    # Default to true when no variable is set on the pipeline
    if ('$(ProcessCanvasApps)'.Contains("ProcessCanvasApps")){
      echo '##vso[task.setvariable variable=localProcessCanvasApps]true'
    }
    else {
      echo '##vso[task.setvariable variable=localProcessCanvasApps]$(ProcessCanvasApps)'
    }
    
    $canvasAppsFolderPath = "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\src\CanvasApps"
    if(Test-Path "$canvasAppsFolderPath") {
        Remove-Item "$canvasAppsFolderPath" -Force -Recurse
    }
  displayName: 'Set localProcessCanvasApps variable'

- template: Hooks\export-solution-unpack-pre-hook.yml

- pwsh: |
      . "$env:POWERSHELLPATH/code-first-functions.ps1"
      set-pac-tools-path "$(Agent.OS)"
  displayName: 'Set pac tools path'

- pwsh: |
      . "$env:POWERSHELLPATH/code-first-functions.ps1"
      clone-or-sync-solution "${{parameters.serviceConnectionUrl}}" "$(connectionVariables.BuildTools.ApplicationId)" "$(connectionVariables.BuildTools.ClientSecret)" "$(connectionVariables.BuildTools.TenantId)" "$(Build.SourcesDirectory)" "${{parameters.repo}}" "${{parameters.solutionName}}" "$(pacPath)" "$(Agent.BuildDirectory)"
  displayName: 'pac - Clone or Sync Solution'

- pwsh: |
    . "$env:POWERSHELLPATH/code-first-functions.ps1"
    add-packagetype-node-to-cdsproj "$(Build.SourcesDirectory)" "${{parameters.repo}}" "${{parameters.solutionName}}"
  displayName: 'Add Packagetype Node to cdsproj'

- template: Hooks\export-solution-manipulate-pre-hook.yml

- pwsh: |
   $solutionXMLPath = "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\src\Other\Solution.xml"
   . "$env:POWERSHELLPATH/export-solution-functions.ps1"
   reset-solution-xml-build-number "$solutionXMLPath"  
  displayName: 'Update Solution XML with Build Number'
  condition: and(succeeded(), ne(variables.UseSolutionVersionFromDataverse, 'true'))

# TEMPORARY until Solution export supports not exporting custom connector configurations
# We need to clear out the contents of any *_connectionparameters.json file.  This is to ensure those valuse
# are not overwritten when the Solution is imported to a downstream environment.
- pwsh: |   
   Get-ChildItem -Path "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}" -Recurse -Filter *_connectionparameters.json | 
   ForEach-Object {
      Clear-Content $_.FullName
   }
  displayName: 'Clear contents of *_connectionparameters.json files'
  enabled: true

- pwsh: |
    if (Test-Path $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}_managed.zip) {
        Remove-Item $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}_managed.zip
    }
    if (Test-Path $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}.zip) {
        Remove-Item $(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}.zip
    }
  displayName: 'Delete solution zip files'
  enabled: true
  
# TEMPORARY until SolutionPackager supports formatting json files on unpack we
# update all the json files to be pretty-print / formatted so they are easier to read in source control.
# This also makes it easier to read changes from one commit to another
- pwsh: |
   $solutionComponentsPath = "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\src"
   . "$env:POWERSHELLPATH/export-solution-functions.ps1"
   Format-JSON-Files "$solutionComponentsPath"
  displayName: 'Format JSON files'
  enabled: true
  
# TEMPORARY until solution exports new business rules with non-empty GUIDs
# We need to set empty GUIDs output when a business rule is first exported.  This is to ensure that
# there aren't noisy diffs when the business rule is subsequently imported and exported.
- pwsh: |
   $workflowsPath = "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\src\Workflows"
   . "$env:POWERSHELLPATH/export-solution-functions.ps1"
    Fix-Unset-GUIDs-In-New-Business-Rules "$workflowsPath"
  displayName: 'Fix unset GUIDs in new Business Rules'

- pwsh: |
   $envvardefinitionPath = "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\src\environmentvariabledefinitions"
   Get-ChildItem -Path "$envvardefinitionPath" -Recurse -Filter environmentvariablevalues.json | Remove-Item
  displayName: 'Verify Environment Variable Current Value Not Exported'
  condition: and(succeeded(), eq(variables.DoNotExportCurrentEnvironmentVariableValues, 'true'))

- template: Hooks\export-solution-update-deploymentsettings-pre-hook.yml

# Update deployment settings configuration
- template: update-deployment-settings.yml
  parameters:
    orgUrl: '$(System.TeamFoundationCollectionUri)'
    projectName: '${{parameters.project}}'
    repo: '${{parameters.repo}}'
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    solutionName: '${{parameters.solutionName}}'
    configurationData: '${{parameters.configurationData}}'
    useDeploymentSettingsPlaceholders: $(UseDeploymentSettingsPlaceholders)

# Set paths to deployment settings
- template: set-deployment-configuration-paths.yml
  parameters:
    configPath: '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\config\'
    environmentName: ''

# Set deployment variable for Activate Flow Configuration
- template: set-deployment-variable.yml
  parameters:
    variableName: 'outActivateFlows'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'ActivateFlowConfiguration'
    displayName: 'Retrieve Flow Activation Config for Export'

# Enabled or Disable Flows in the Solution based on configuration
- template: enable-disable-solution-flows.yml
  parameters:
    buildSourceDirectory: '$(Build.SourcesDirectory)'
    repo: '${{parameters.repo}}'
    solutionName: '${{parameters.solutionName}}'
    disableAllFlows: '$(DisableFlows)'
    activateFlowConfiguration: '$(outActivateFlows)'

# Set deployment variable for default environment variables
- template: set-deployment-variable.yml
  parameters:
    variableName: 'outDefaultEnvironmentVariables'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'DefaultEnvironmentVariables'
    displayName: 'Retrieve Default Environment Variable Config for Export'

- pwsh: |
   $envvardefinitionPath = "$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\SolutionPackage\src\environmentvariabledefinitions"
   . "$env:POWERSHELLPATH/export-solution-functions.ps1"
    verify-default-environment-variables-are-set "$(outDefaultEnvironmentVariables)" "$envvardefinitionPath"
  displayName: 'Verify Default Environment Variables Are Set'
  condition: and(succeeded(), eq(variables.VerifyDefaultEnvironmentVariableValues, 'true'))

- template: set-website-variable.yml
  parameters:
   serviceConnectionUrl: '${{parameters.serviceConnectionUrl}}'
   websiteName: '${{parameters.portalSiteName}}'

- template: Hooks\export-power-page-pre-hook.yml

- template: export-Power-Page.yml
  parameters:
    websiteId: $(WebsiteId)
    repo: ${{parameters.repo}}
    serviceConnectionUrl: '${{parameters.serviceConnectionUrl}}'
    serviceConnectionName: '${{parameters.serviceConnectionName}}'
    solutionName: '${{parameters.solutionName}}'
    websiteName: '${{parameters.portalSiteName}}'

- template: Hooks\export-power-page-post-hook.yml

- template: Hooks\export-solution-commit-pre-hook.yml

- pwsh: |
    # Workaround for git Filename too long issue 
    git config --system core.longpaths true
    git add --all
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Add Changes to Git Branch'

# Commit all changes to Git branch. If there are no changes we want to warn the user that there was nothing to commit. As this could mean there was a user error involved.
- pwsh: |
    $gitStatus = iex "git status --porcelain"
    if ($gitStatus) {
        git commit -m "${{parameters.commitMessage}}"
    }
    else {
        Write-Host "##vso[task.logissue type=warning]There is nothing to commit. No changes have been made since the previous commit. If this is unexpected make sure your changes have been published before committing again."
        exit 1;
    }
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Commit Changes to Git Branch'
  continueOnError: true
  
# If BranchToCreate variable value is '', then push to the branch specified in the Branch variable
- script: |
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.branch}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branch}} Remote Branch'
  condition: and(eq('${{parameters.gitAccessUrl}}', ''), succeeded(), eq('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is not '', then push to the branch specified in the BranchToCreate variable
- script: |
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.branchToCreate}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branchToCreate}} Remote Branch'
  condition: and(eq('${{parameters.gitAccessUrl}}', ''), succeeded(), ne('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is not passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is '', then push to the branch specified in the BranchToCreate variable
- script: |
   git remote set-url origin ${{parameters.gitAccessUrl}}
   git push origin ${{parameters.branch}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branchToCreate}} Remote Branch'
  condition: and(ne('${{parameters.gitAccessUrl}}', ''), succeeded(), eq('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is passed for the BranchToCreate variable, then run this task

# If BranchToCreate variable value is not '', then push to the branch specified in the BranchToCreate variable
- script: |
   git remote set-url origin ${{parameters.gitAccessUrl}}
   git push origin ${{parameters.branchToCreate}}
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.repo}}
  displayName: 'Push to ${{parameters.branchToCreate}} Remote Branch'
  condition: and(ne('${{parameters.gitAccessUrl}}', ''), succeeded(), ne('${{parameters.branchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is not passed for the BranchToCreate variable, then run this task

- template: Hooks\export-solution-post-hook.yml