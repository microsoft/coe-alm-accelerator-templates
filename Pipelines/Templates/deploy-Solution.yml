# This template deploys a solution built by build-Solution.yml and configures the solution in the target environment.
parameters:
- name: serviceConnectionName
  type: string
- name: serviceConnectionUrl
  type: string
- name: environmentName
  type: string
- name: solutionName
  type: string
- name: importUnmanaged
  type: string
  default: 'false'
- name: overwriteUnmanagedCustomizations
  type: string
  default: 'true'
- name: skipBuildToolsInstaller
  type: string
  default: 'false'
- name: cacheEnabled
  type: string
  default: 'true'

steps:
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
  displayName: 'Install Power Platform Build Tools'
  condition: and(succeeded(), eq('${{parameters.skipBuildToolsInstaller}}', 'false'))

# Use set-connection-variables task to get values from AzDO Service Connection to be used in scripts that don't use tasks
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.set-connection-variables.PowerPlatformSetConnectionVariables@2
  displayName: 'Set Connection Variables'
  name: connectionVariables
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'

- template: set-spn-token.yml
  parameters:
    serviceConnection: ${{parameters.serviceConnectionUrl}}
    tenantId: $(connectionVariables.BuildTools.TenantId)
    clientId: $(connectionVariables.BuildTools.ApplicationId)
    clientSecret: $(connectionVariables.BuildTools.ClientSecret)

- pwsh: |
    . "$env:POWERSHELLPATH/load-save-pipeline-parameters.ps1"
    Write-Deploy-Pipeline-Parameters "$(Agent.BuildDirectory)\deploy-pipeline-parameters.json" "${{ parameters.serviceConnectionName }}" "${{ parameters.serviceConnectionUrl }}" "${{ parameters.environmentName }}" "${{ parameters.solutionName }}" "${{ parameters.importUnmanaged }}" "${{ parameters.overwriteUnmanagedCustomizations }}" "${{ parameters.skipBuildToolsInstaller }}" "${{ parameters.cacheEnabled }}"
  displayName: 'Saving Deploy Pipeline Parameters'

- template: Hooks\deploy-solution-pre-hook.yml

# Set pipeline vars for tools paths.
- template: set-tools-paths.yml

# Restore PowerShell Module dependencies if available in cache
# https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
- task: Cache@2
  displayName: Cache Powershell Modules
  inputs:
    key:  restoremodules | "$(powerPlatformToolsSubPath)" | $(Pipeline.Workspace)/PipelineUtils/Pipelines/Templates/install-powershell-modules.yml
    path: $(powerPlatformToolsPath)
    cacheHitVar: powerPlatformToolsPath_IsCached
  condition: and(succeeded(), and(eq('${{parameters.cacheEnabled}}', 'true'), ne(variables['CacheEnabled'], 'false')))

- template: install-powershell-modules.yml

# Other tasks, which use the PowerApps PowerShell cmdlets, need the environment guid.  Setting it for future use.
- template: set-environment-id.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionName}}'

# Other tasks, in this pipeline need to know if the solution already exists. Setting it for future use.
- template: set-solution-exists.yml
  parameters:
    solutionName: '${{parameters.solutionName}}'

# Get the solution package from artifact uploaded by the build pipeline
- task: DownloadPipelineArtifact@2
  displayName: 'Download Build Pipeline Artifact'

- pwsh: |
   $artifactDropPath = '$(Pipeline.Workspace)/drop/'
   If (Test-Path -Path "$(Pipeline.Workspace)/buildPipeline/drop")
   {
       $artifactDropPath = "$(Pipeline.Workspace)/buildPipeline/drop/"
   }
   Write-Host "##vso[task.setVariable variable=ArtifactDropPath]$artifactDropPath"
  displayName: 'Get artifact drop path'

# Set paths to deployment settings
- template: set-deployment-configuration-paths.yml
  parameters:
    configPath: '$(ArtifactDropPath)'
    environmentName: '${{parameters.environmentName}}'

# Update any deploymentSettings.json via FileTransform task. This task will replace values in a JSON file based on their path. See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/transforms-variable-substitution?view=azure-devops&tabs=Classic#jsonvarsubs
- task: FileTransform@1
  displayName: 'File Transformation: deploymentSettings.json'
  inputs:
    folderPath: '$(ArtifactDropPath)'
    targetFiles: '*deploymentSettings*.json'
    fileType: json
  condition: and(succeeded(), or(ne(variables['DeploymentSettingsPath'], ''), ne(variables['CustomDeploymentSettingsPath'], '')))

# Third party task to replace tokens in files. The FileTransform above replaces JSON tokens based on their path as opposed to replacing text tokens in a file which can be more error prone in some cases.
# If you aren't using this task it can be safely removed or disabled by setting enabled: false. Sample token: #{VariableNameToReplace}#
- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace Tokens: deploymentSettings.json'
  inputs:
    rootDirectory: '$(ArtifactDropPath)'
    targetFiles: '*deploymentSettings*.json'
    actionOnMissing: 'silently continue'
    writeBOM: false
    encoding: 'utf-8'
    defaultValue: ''
  condition: and(succeeded(), or(ne(variables['DeploymentSettingsPath'], ''), ne(variables['CustomDeploymentSettingsPath'], '')))
  enabled: true

- template: Hooks\deploy-solution-import-pre-hook.yml

- pwsh: |
   . "$env:POWERSHELLPATH/build-deploy-solution-functions.ps1"
    Get-unmanaged-solution-zip-path "$(ArtifactDropPath)" "${{parameters.solutionName}}"
  displayName: 'Get unmanaged solution zip path'
  condition: and(succeeded(), eq(variables['IsUnmanaged'], 'true'))

# If called from import-unmanaged-to-dev-environment.yml, this task will run to deploy an unmanaged solution
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@2
  displayName: 'Import Unmanaged Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
    SolutionInputFile: '$(UnmanagedSolutionPath)'
    PublishWorkflows: true
    UseDeploymentSettingsFile: $(UseDeploymentSettings)
    DeploymentSettingsFile: $(DeploymentSettingsPath)
  condition: and(succeeded(), eq(variables['IsUnmanaged'], 'true'))

- pwsh: |
   . "$env:POWERSHELLPATH/build-deploy-solution-functions.ps1"
    Get-Managed-Solution-Zip-Path "$(ArtifactDropPath)" "${{parameters.solutionName}}"

    #Set TriggerSolutionUpgrade to false if the variable is not set
    if('$(TriggerSolutionUpgrade)'.Contains("TriggerSolutionUpgrade")) {
        Write-Host "##vso[task.setVariable variable=TriggerSolutionUpgrade]false"
    }
  displayName: 'Get managed solution zip path'
  condition: and(succeeded(), ne(variables['IsUnmanaged'], 'true'))

# If the TriggerSolutionUpgrade variable is false, then import the solution as an Update
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@2
  displayName: 'Import Managed Solution as Update'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
    SolutionInputFile: $(ManagedSolutionPath)
    PublishWorkflows: true
    OverwriteUnmanagedCustomizations: ${{parameters.overwriteUnmanagedCustomizations}}
    UseDeploymentSettingsFile: $(UseDeploymentSettings)
    DeploymentSettingsFile: $(DeploymentSettingsPath)
  condition: and(succeeded(), ne(variables['IsUnmanaged'], 'true'), or(eq(variables['TriggerSolutionUpgrade'], 'false'), eq(variables['SolutionExists'], 'false')))

# If the TriggerSolutionUpgrade variable is true, then import the solution as an Upgrade, staging it as a holding solution, so we can apply a solution Upgrade.
# Doing this will ensure that items removed from the solution in development are also removed from the solution in the target environment after the Upgrade is applied.
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@2
  displayName: 'Import Managed Solution as Upgrade'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
    SolutionInputFile: $(ManagedSolutionPath)
    HoldingSolution: true
    OverwriteUnmanagedCustomizations: ${{parameters.overwriteUnmanagedCustomizations}}
    UseDeploymentSettingsFile: $(UseDeploymentSettings)
    DeploymentSettingsFile: $(DeploymentSettingsPath)
  condition: and(succeeded(), ne(variables['IsUnmanaged'], 'true'), eq(variables['TriggerSolutionUpgrade'], 'true'), eq(variables['SolutionExists'], 'true'))

# NOTE: Sometimes you need to perform intermediary steps between staging the upgrade and applying it.  
# An example would be moving data from one entity to another before deleting the entity.
# You would add steps to your pipeline here to accomplish this. 

# If the TriggerSolutionUpgrade variable is true,then apply the solution Upgrade.
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.apply-solution-upgrade.PowerPlatformApplySolutionUpgrade@2
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
    SolutionName: ${{parameters.solutionName}}
    AsyncOperation: true
  condition: and(succeeded(), eq(variables['TriggerSolutionUpgrade'], 'true'), eq(variables['SolutionExists'], 'true'))

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@2
  displayName: 'Power Platform Publish Customizations '
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
  condition: and(succeeded(), eq(variables['IsUnmanaged'], 'true'))
  # Only publish customizations for when importing unmanaged solutions into a dev environment.

# Set deployment variables
- template: set-deployment-variable.yml
  parameters:
    variableName: 'outActivateFlows'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'ActivateFlowConfiguration'
    displayName: 'Retrieve Flow Activation Config for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outAadGroupTeamConfiguration'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'AadGroupTeamConfiguration'
    displayName: 'Retrieve AAD Group Team Config for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outAadGroupCanvasConfiguration'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'AadGroupCanvasConfiguration'
    displayName: 'Retrieve AAD Group Canvas Config for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outSolutionComponentOwnershipConfiguration'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'SolutionComponentOwnershipConfiguration'
    displayName: 'Retrieve Solution Component Ownership Config for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outConnectionReferences'
    deploymentSettingsPath: $(DeploymentSettingsPath)
    deploymentSettingsNode: 'ConnectionReferences'
    displayName: 'Retrieve Connection Reference Config for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outWebHookUrls'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'WebhookUrls'
    displayName: 'Retrieve WebHook Urls Config for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outSDKMessages'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'SDKMessages'
    displayName: 'Retrieve SDK Messages Config for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outFlowShareWithGroupTeamConfiguration'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'FlowShareWithGroupTeamConfiguration'
    displayName: 'Retrieve Flow Share with Group Team Configuration for Deploy'

- template: set-deployment-variable.yml
  parameters:
    variableName: 'outConnectorShareWithGroupTeamConfiguration'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'ConnectorShareWithGroupTeamConfiguration'
    displayName: 'Retrieve Connector Share with Group Team Configuration for Deploy'

- template: Hooks\deploy-solution-configure-pre-hook.yml

- template: import-configuration-migration-data.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionName}}'
    environmentName: '${{parameters.environmentName}}'

- template: set-dataverse-aad-group-teams.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    aadGroupTeamConfiguration: '$(outAadGroupTeamConfiguration)'

- template: share-canvas-app-with-aad-group.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    aadGroupCanvasConfiguration: '$(outAadGroupCanvasConfiguration)'

- template: update-solution-component-ownership.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    solutionComponentOwnershipConfiguration: '$(outSolutionComponentOwnershipConfiguration)'

- template: update-webhook-urls.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    webHookConfiguration: '$(outWebHookUrls)'

- template: update-sdk-messages.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    sdkMessageConfiguration: '$(outSDKMessages)'

- template: activate-flows.yml
  parameters:
    solutionName: ${{parameters.solutionName}}
    serviceConnection: ${{parameters.serviceConnectionUrl}}
    connectionReferences: '$(outConnectionReferences)'
    solutionComponentOwnershipConfiguration: '$(outSolutionComponentOwnershipConfiguration)'
    activateFlowConfiguration: '$(outActivateFlows)'

- template: share-flows-with-group-team.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    flowShareWithGroupTeamConfiguration: '$(outFlowShareWithGroupTeamConfiguration)'

- template: share-connectors-with-group-team.yml
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    connectorShareWithGroupTeamConfiguration: '$(outConnectorShareWithGroupTeamConfiguration)'

- template: run-canvas-tests.yml 
  parameters:
    serviceConnection: '${{parameters.serviceConnectionUrl}}'
    aadHost: '$(AadHost)'
    solutionName: ${{parameters.solutionName}}
    testAccountUsername: '$(TestAutomationUsername)'
    testAccountPassword: '$(TestAutomationPassword)'
    makerPortalUrl: '$(TestAutomationMakerPortalUrl)'
    loginMethod: '$(TestAutomationLoginMethod)'

- pwsh: |
      . "$env:POWERSHELLPATH/code-first-functions.ps1"
      set-pac-tools-path "$(Agent.OS)"
  displayName: 'Set pac tools path'

- pwsh: |
    . "$env:POWERSHELLPATH/portal-functions.ps1"
    Process-and-Upload-Websites "$(Build.SourcesDirectory)" "$(Build.Repository.Name)" "${{parameters.solutionName}}" "${{ parameters.environmentName }}" "$(pacPath)" "${{parameters.serviceConnectionUrl}}" "$(connectionVariables.BuildTools.ApplicationId)" "$(connectionVariables.BuildTools.ClientSecret)" "$(connectionVariables.BuildTools.TenantId)"
  displayName: "Upload website(s)"

- template: Hooks\deploy-solution-post-hook.yml
