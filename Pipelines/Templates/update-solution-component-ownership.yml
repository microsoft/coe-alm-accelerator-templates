parameters:
- name: displayName
  type: string
- name: serviceConnection
  type: string
- name: solutionComponentOwnershipConfiguration
  type: string
- name: updateComponentOnwership
  type: string
- name: enableFlows
  type: string

steps:
- powershell: |
    Import-Module Microsoft.Xrm.Data.PowerShell -Force -RequiredVersion $(XrmDataPowerShellVersion) -ArgumentList @{ NonInteractive = $true }
    $conn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"

    # json config value must follow this format
    #[
    #    {
    #        "solutionComponentType": 29,
    #        "solutionComponentUniqueName":"if-29-must-be-workflowid",
    #        "ownerEmail": "username@yourdomain.com"
    #    },
    #    {
    #        "solutionComponentType": 29,
    #        "solutionComponentUniqueName":"if-29-must-be-workflowid",
    #        "ownerEmail": "username@yourdomain.com"
    #    }
    #]
    $config = ConvertFrom-Json '${{parameters.solutionComponentOwnershipConfiguration}}'
    #$config = ConvertFrom-Json '[{"solutionComponentType": 29,"solutionComponentUniqueName": "bd40f612-41ff-ea11-a815-000d3a1abe26","ownerEmail": "jonis@pplatform.onmicrosoft.com"}]'
    
    # Workflows of type Modern Flow might need an interactive user owner.
    # One example is where you want the Flow that runs to use that users license entitlements.
    # Currently only implementing workflow ownership change until we indentify real usage scenarios for other solution components needing ownership change post import.
    # See https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/solutioncomponent?view=dynamics-ce-odata-9
    # ...for solutionComponentType values 29=Workflow (including Flow), 300=Canvas App, etc 
    Write-Host "##[group]Reassigning Ownership of components"
    $isException = $false
    foreach ($ownershipConfig in $config){
      if($ownershipConfig.ownerEmail -ne '' -and $ownershipConfig.solutionComponentType -ne '' -and $ownershipConfig.solutionComponentUniqueName -ne ''){
          switch ($ownershipConfig.solutionComponentType){
            # Workflow 
            29 {  
                $workflow = Get-CrmRecord -conn $conn -EntityLogicalName workflow -Id $ownershipConfig.solutionComponentUniqueName -Fields clientdata,category,statecode
            } 
            default {
              Write-Host "##vso[task.logissue type=warning]NOT IMPLEMENTED - You supplied a solutionComponentType of $ownershipConfig.solutionComponentType for solutionComponentUniqueName $solutionComponentUniqueName"
              exit 1;
            }      
          }
          $systemuserResult = Get-CrmRecords -conn $conn -EntityLogicalName systemuser -FilterAttribute "domainname" -FilterOperator "eq" -FilterValue $ownershipConfig.ownerEmail
          $systemUserId = $systemuserResult.CrmRecords[0].systemuserid
          $impersonationConn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"
          $impersonationCallerId = $systemUserId
          Set-CrmConnectionCallerId -conn $impersonationConn -CallerId $impersonationCallerId

          if('${{parameters.updateComponentOnwership}}' -ne "false") {
            #Need to deactivate the flow before setting ownership if currently active
            if($workflow.statecode -eq "Activated"){
                Set-CrmRecordState -conn $impersonationConn -EntityLogicalName workflow -Id $ownershipConfig.solutionComponentUniqueName -StateCode Draft -StatusCode Draft
                $workflow.statecode = "Draft"
            }
            Set-CrmRecordOwner -conn $conn $workflow $systemUserId
          }

          #Activate the workflow using the owner.
          if($workflow.statecode -ne "Activated" -and '${{parameters.enableFlows}}' -ne "false"){
            $impersonationConn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"
            $impersonationCallerId = $systemUserId
            Set-CrmConnectionCallerId -conn $impersonationConn -CallerId $impersonationCallerId
            Write-Host "Enabling $($workflow.category) $($workflow.name) as $($systemuserResult.CrmRecords[0].FullName) as ($($systemuserResult.CrmRecords[0].systemuserid))"
            try {
                Set-CrmRecordState -conn $impersonationConn -EntityLogicalName workflow -Id $ownershipConfig.solutionComponentUniqueName -StateCode Activated -StatusCode Activated
            }
            catch {
                Write-Host "##vso[task.logissue type=error]Failed to enable $($workflow.category) $($workflow.name): $($_.Exception.Message)"
                $isException = $true
            }
          }
      }
    }
    Write-Host "##[endgroup]"
    if($isException) {
      throw "Failed to enable one or more workflows"
    }
  displayName: '${{parameters.displayName}}'
  condition: and(succeeded(), ne('${{parameters.solutionComponentOwnershipConfiguration}}', ''))