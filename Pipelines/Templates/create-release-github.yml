#Template to create coe-starter-kit releases in Github based on defined milestones for Month/Year
parameters:
- name: solutionName
  type: string
- name: solutionDisplayName
  type: string
- name: releaseMonth
  type: string
- name: releaseYear
  type: string
- name: connectionName
  type: string
- name: releaseNotesPath
  type: string

steps:

#This step will read the release notes into a variable and append a list of issues based on the milestone defined by:
#'${{ parameters.solutionDisplayName }} - ${{ parameters.releaseMonth }} ${{ parameters.releaseYear }}'
#Example Milestone 'CoE Starter Kit - July 2021'
#If a milestone with the specific name is not found an error will be thrown
- powershell: |
    $releaseNotes = Get-Content '${{ parameters.releaseNotesPath }}' -Raw
    $releaseNotes = $releaseNotes + [Environment]::NewLine + '## Change Log'

    $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
    $headers.Add("Accept", "application/vnd.github.groot-preview+json")
    $headers.Add("Authorization", "Bearer $(GitHubPAT)")

    $milestoneRequest = "https://api.github.com/repos/microsoft/coe-starter-kit/milestones?sort=due_on&direction=desc"
    $milestoneResponse = Invoke-RestMethod $milestoneRequest -Method 'GET' -Headers $headers
    $currentMilestone = $null
    $milestoneName = '${{ parameters.solutionDisplayName }} - ${{ parameters.releaseMonth }} ${{ parameters.releaseYear }}'
    foreach($milestone in $milestoneResponse){
        if($milestone.title -eq $milestoneName){
            $currentMilestone = $milestone
            break
        }
    }

    if($currentMilestone -ne $null){
        # NOTE: Since this is for internal use only right now, we are hardcoding microsoft/coe-starter-kit
        #       We will consider improving this in the future, but needed minimum to get it working for preview release
        $issuesRequest = "https://api.github.com/repos/microsoft/coe-starter-kit/issues?milestone=" + $currentMilestone.number
        $issueResponse = Invoke-RestMethod $issuesRequest -Method 'GET' -Headers $headers

        foreach($issue in $issueResponse){
            $releaseNotes = $releaseNotes + [Environment]::NewLine + "  - #" + $issue.number + "-" + $issue.title
            Write-Host (ConvertTo-Json $issue)
        }

        Set-Content -Path ${{ parameters.releaseNotesPath }} -Value $releaseNotes
    }
    else{
      Write-Error 'No milestone was found for $milestoneName'
      Write-Host '##vso[task.logissue type=error]No milestone was found for $milestoneName'
      exit(1)
    }
  displayName: Build Release Notes from Milestone

- task: GitHubRelease@1
  inputs:
    gitHubConnection: ${{ parameters.connectionName }}
    tagSource: 'userSpecifiedTag'
    tag: '${{ parameters.solutionName }}-${{ parameters.releaseMonth }}${{ parameters.releaseYear }}'
    title: '${{ parameters.solutionDisplayName }} ${{ parameters.releaseMonth }} ${{ parameters.releaseYear }}'
    releaseNotesFilePath: '${{ parameters.releaseNotesPath }}'
    addChangeLog: false
    isDraft: true
    isPreRelease: true
    assets: |
      $(Pipeline.Workspace)/releaseassets/*.*
  displayName: 'Create ${{ parameters.solutionDisplayName }} Release'
