#Template to create releases in Github based on defined milestones for Month/Year
parameters:
- name: gitHubApiUrl
  type: string
- name: solutionName
  type: string
- name: solutionDisplayName
  type: string
- name: releaseMonth
  type: number
- name: releaseYear
  type: number
- name: connectionName
  type: string
- name: releaseNotesPath
  type: string
- name: closeIssues
  type: string
- name: issueClosingComment
  type: string
  default: ''
- name: isDraft
  type: boolean
  default: true
- name: isPreRelease
  type: boolean
  default: false
- name: hotfixReleaseNumber
  type: number
  default: 0
- name: queryHeadingDelimited
  type: string
  default: "|"

steps:

#This step will read the release notes into a variable and append a list of issues based on the milestone defined by:
#'${{ parameters.solutionDisplayName }} - ${{ parameters.releaseMonth }} ${{ parameters.releaseYear }}'
#Example Milestone 'CoE Starter Kit - July 2021'
#If a milestone with the specific name is not found an error will be thrown
- pwsh: |

    #Convert release month number to name
    $releaseMonthName = (Get-Culture).DateTimeFormat.GetMonthName(${{ parameters.releaseMonth }})
    Write-Host "##vso[task.setvariable variable=ReleaseMonthName]$releaseMonthName"
    $releaseMonthPadded = ([string]${{parameters.releaseMonth}}).PadLeft(2,'0')
    $fullReleaseNotesPath = '${{ parameters.releaseNotesPath }}/${{parameters.solutionName}}/RELEASENOTES-${{parameters.releaseYear}}' + $releaseMonthPadded + '.md'
    $releaseNotes = ''
    if(Test-Path $fullReleaseNotesPath) {
        $releaseNotes = Get-Content $fullReleaseNotesPath -Raw
    }
    else {
        $fullReleaseNotesPath = '${{ parameters.releaseNotesPath }}/${{parameters.solutionName}}/RELEASENOTES.md'
        if(Test-Path $fullReleaseNotesPath) {
            $releaseNotes = Get-Content $fullReleaseNotesPath -Raw
        }
        else
        {
            New-Item $fullReleaseNotesPath
        }
    }
    Write-Host "##vso[task.setvariable variable=ReleaseNotesPath]$fullReleaseNotesPath"
    $releaseNotes = $releaseNotes + [Environment]::NewLine + '## Change Log'

    $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
    $headers.Add("Accept", "application/vnd.github.groot-preview+json")
    $headers.Add("Authorization", "Bearer $(GitHubPAT)")

    #Find the milestone for this release e.g. 'CoE Starter Kit - July 2021
    $milestoneRequest = "https://api.github.com/repos/${{ parameters.gitHubApiUrl }}/milestones?sort=due_on&direction=desc"
    $milestoneResponse = Invoke-RestMethod $milestoneRequest -Method 'GET' -Headers $headers
    $currentMilestone = $null
    $milestoneName = '${{ parameters.solutionDisplayName }} - ' + $releaseMonthName + ' ' + ${{ parameters.releaseYear }}
    foreach($milestone in $milestoneResponse){
        if($milestone.title -eq $milestoneName){
            $currentMilestone = $milestone
            break
        }
    }
    #Set the tag and title for the release
    $tag = '${{ parameters.solutionName }}-$(ReleaseMonthName)${{ parameters.releaseYear }}'
    $title = '${{ parameters.solutionDisplayName }} $(ReleaseMonthName) ${{ parameters.releaseYear }}'
    if(${{parameters.HotfixReleaseNumber}} -ne 0) {
        $tag = '${{ parameters.solutionName }}-$(ReleaseMonthName)${{ parameters.releaseYear }}-HF${{parameters.HotfixReleaseNumber}}'
        $title = '${{ parameters.solutionDisplayName }} $(ReleaseMonthName) ${{ parameters.releaseYear }} - Hotfix ${{parameters.HotfixReleaseNumber}}'
    }

    Write-Host "##vso[task.setvariable variable=Tag]$tag"
    Write-Host "##vso[task.setvariable variable=Title]$title"

    #Build the release notes
    if($currentMilestone -ne $null){
        $queryHeadings = "${{parameters.queryHeadingDelimited}}".split('|')
        for ($i = 0; $i -lt $queryHeadings.Length; $i = $i+2) {
            #Only retrieve closed issues in this milestone
            $issuesRequestUrl = 'https://api.github.com/search/issues?per_page=100&sort=created&order=asc&q=is:issue repo:${{ parameters.gitHubApiUrl }} milestone:"' + $currentMilestone.title + '"'
            if(-not [string]::IsNullOrWhiteSpace($queryHeadings[$i])) {
                $issuesRequestUrl = $issuesRequestUrl + " " + $queryHeadings[$i]
            }
            Write-Host $issuesRequestUrl
            $issueResponse = Invoke-RestMethod $issuesRequestUrl -Method 'GET' -Headers $headers

            if($issueResponse.items.Length -gt 0 -and -not [string]::IsNullOrWhiteSpace($queryHeadings[$i + 1])) {
                $releaseNotes = [Environment]::NewLine + $releaseNotes + [Environment]::NewLine + $queryHeadings[$i + 1] + " (" + $issueResponse.items.Length + ")"
            }
            foreach($issue in $issueResponse.items){
                if("${{ parameters.closeIssues }}" -eq "True") {
                    if('${{ parameters.issueClosingComment }}' -ne '') {
                        # Add the comment to the issue
                        # /repos/{owner}/{repo}/issues/{issue_number}/comments
                        $commentRequestUrl = "https://api.github.com/repos/${{ parameters.gitHubApiUrl }}/issues/" + $issue.number + "/comments"
                        $commentFormatted = "@" + $issue.user.login + " ${{ parameters.issueClosingComment }}"
                        $commentBody = "{`"body`": `"$commentFormatted`"}"
                        Invoke-RestMethod $commentRequestUrl -Method 'POST' -Headers $headers -Body $commentBody
                    }

                    # Close the issue if not closed
                    if($issue.state -ne 'closed') {
                        #/repos/{owner}/{repo}/issues/{issue_number}
                        $issueRequestClosingUrl = "https://api.github.com/repos/${{ parameters.gitHubApiUrl }}/issues/" + $issue.number
                        $closeRequestBody = "{`"state`": `"closed`"}"
                        Invoke-RestMethod $issueRequestClosingUrl -Method 'PATCH' -Headers $headers -Body $closeRequestBody
                    }
                }
                $releaseNotes = $releaseNotes + [Environment]::NewLine + "  - #" + $issue.number + "-" + $issue.title #Add a line for each issue with number and title. Add more here as necessary
            }
        }
        Set-Content -Path $fullReleaseNotesPath -Value $releaseNotes

        exit 0
    }
  displayName: Build Release Notes from Milestone

- task: GitHubRelease@1
  inputs:
    gitHubConnection: ${{ parameters.connectionName }}
    tagSource: 'userSpecifiedTag'
    tag: $(Tag)
    title: $(Title)
    releaseNotesFilePath: '$(ReleaseNotesPath)'
    addChangeLog: false #The OOB changelog doesn't allow for filtering based on milestone so we created our own changelog above
    isDraft: ${{ parameters.isDraft }}
    isPreRelease: ${{ parameters.isPreRelease }}
    assets: |
      $(Pipeline.Workspace)/releaseassets/*.*
  displayName: 'Create ${{ parameters.solutionDisplayName }} Release'
