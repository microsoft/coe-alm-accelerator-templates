#We are going to set websiteId as a pipeline variable only if there is a Power Page in the Dataverse

parameters:
- name: serviceConnectionUrl
  type: string
- name: websiteName
  type: string

steps:
- pwsh: |
    Write-Host "Portal Website provided as variable. Website ID - $(PowerPageWebsiteId)"
    echo "##vso[task.setvariable variable=WebsiteId;]$(PowerPageWebsiteId)"
  condition: ne(variables['PowerPageWebsiteId'], '')
  displayName: "Fetch Power Pages Website ID from Variable"

- pwsh: |
    Write-Host "websiteName - ${{parameters.websiteName}}"
    $websiteId = "NA"
    if("${{parameters.websiteName}}" -ne "NA" -and "${{parameters.websiteName}}" -ne "")
    {
        Write-Host "Portal 'Website ID' not provided as variable. Making API call."
        . "$env:POWERSHELLPATH/dataverse-webapi-functions.ps1"
        $dataverseHost = Get-HostFromUrl "${{parameters.serviceConnectionUrl}}"
        # Fetch the Website by the 'Website name' passed from App (Exact Match)
        $odataQuery = "adx_websites?`$filter=adx_name eq '${{parameters.websiteName}}'"    
        Write-Host "Portal odataQuery - $odataQuery"

        try{
            $response = Invoke-DataverseHttpGet $env:SPNTOKEN $dataverseHost $odataQuery
        }
        catch{
            Write-Host "Error - $($_.Exception.Message)"
            # if Power Pages solutions are not installed in Dataverse. adx_websites table will not be created. Suppres the error.
        }

        if($null -ne $response.value -and $response.value.count -gt 0){
            $websiteId = $response.value[0].adx_websiteid
        }
        else{
            Write-Host "No sites found with the provided website name - ${{parameters.websiteName}}. Retry by correcting the solution name."
        }
    }
    Write-Host "websiteId - $websiteId"
    echo "##vso[task.setvariable variable=WebsiteId]$websiteId"
  condition: eq(variables['PowerPageWebsiteId'], '')
  displayName: "Fetch Power Pages Website ID from Dataverse"