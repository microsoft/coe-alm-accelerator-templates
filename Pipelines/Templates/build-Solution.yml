# This is a build template referenced from build-deploy-Solution.yml
# NOTE: We are *not* using a Dataverse environment to validate the build in the pipeline.  
# Instead, we have configured a PR trigger (see: https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#pr-triggers)
# When a PR is created is, we kick off a build and attempt to deploy that build to a Dataverse environment.
# This serves as the initial quality check for the PR.
parameters:
- name: buildType
  type: string
  default: 'Both'

steps:  
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'

- powershell: |
    $splitName = "$(Build.Repository.Name)".Split("/")
    $repoName = $splitName[$splitName.Length - 1]
    Write-Host "##vso[task.setvariable variable=RepoName]$repoName"
  displayName: 'Set Source Repo Name'
  condition: and(succeeded(), ne('${{parameters.buildType}}', 'Unmanaged'))
    
# Solution version in source control is not used.  Instead, create version at build time from the current build number.
- task: knom.regexreplace-task.regex-replace.RegexReplace@3
  displayName: 'Update Solution XML with Build Number'
  inputs:
    InputSearchPattern: |
      $(Build.SourcesDirectory)\$(RepoName)\$(SolutionName)\SolutionPackage\**\Solution.xml
    FindRegex: '<Version>[\s\S]*?<\/Version>'
    ReplaceRegex: '<Version>$(Build.BuildNumber)</Version>'
  condition: and(succeeded(), ne('${{parameters.buildType}}', 'Unmanaged'))

# Before we committed changes, we formatted all json files for readability in source control.  This breaks solution package, so we need to flatten them before packing   
- pwsh: |
    #When we unpack the solution files, we format the json, but it causes solution import failures so we need to flatten the files
    Get-ChildItem -Path "$(Build.SourcesDirectory)\$(RepoName)\$(SolutionName)" -Recurse -Filter *.json |
    ForEach-Object {(Get-Content $_.FullName) -join ' ' | Set-Content $_.FullName}
  displayName: 'Flatten JSON files'
  enabled: true

# Use temp exe from PowerShell to pack source files into msapp
- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\$(RepoName)\$(SolutionName)" -Recurse -Filter *_src | 
   ForEach-Object {     
     $unpackedPath = $_.FullName
     $packedFileName = $unpackedPath.Replace("_msapp_src", ".msapp")
     $(Pipeline.Workspace)\PipelineUtils\Pipelines\temp-canvas-packager\temp-canvas-packager.exe -pack $packedFileName $unpackedPath
     Remove-Item -Path $unpackedPath -Recurse
   }
  displayName: 'pack msapp files'
  enabled: true

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.pack-solution.PowerPlatformPackSolution@0
  displayName: 'Pack Solutions (Unmanaged and/or Managed)'
  inputs:
    SolutionSourceFolder: $(Build.SourcesDirectory)\$(RepoName)\$(SolutionName)\SolutionPackage
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(Build.BuildNumber).zip'
    SolutionType: ${{parameters.buildType}}

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.checker.PowerPlatformChecker@0
  displayName: 'Run Solution Checker'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ValidationServiceConnection)'
    FilesToAnalyze: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(Build.BuildNumber).zip'
    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

- powershell: |
    $path = "$(Build.SourcesDirectory)\$(RepoName)\$(SolutionName)\ConfigurationMigrationData"
    $configurationMigrationExists = Test-Path $path
    Write-Host "##vso[task.setvariable variable=ConfigurationMigrationExists]$configurationMigrationExists"
  displayName: 'Check if Configuration Migration Data exists'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/$(RepoName)/$(SolutionName)/ConfigurationMigrationData'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/ConfigurationMigrationData.zip'
    replaceExistingArchive: true
  displayName: 'Zip Configuration Migration Data'
  condition: and(succeeded(), eq(variables['ConfigurationMigrationExists'], 'True'))
  #skip task if there is no ConfigurationMigrationData in source control

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: drop
