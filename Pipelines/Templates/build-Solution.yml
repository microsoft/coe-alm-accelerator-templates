#This template builds a solution from source control. Once the solution is built deploy-Solution.yml can be called to deploy from the asset built here
parameters:
- name: buildType
  type: string
  default: 'Both'
- name: serviceConnectionName
  type: string
- name: serviceConnectionUrl
  type: string
- name: solutionName
  type: string

steps:  
- template: set-spn-token.yml
  parameters:
    serviceConnection: ${{parameters.serviceConnectionUrl}}

- pwsh: |
    . "$env:POWERSHELLPATH/load-save-pipeline-parameters.ps1"
    Write-Build-Pipeline-Parameters "$(Agent.BuildDirectory)\build-pipeline-parameters.json" "${{parameters.buildType }}" "${{parameters.serviceConnectionName }}" "${{parameters.serviceConnectionUrl }}" "${{parameters.solutionName }}"
  displayName: 'Saving Build Pipeline Parameters'

- template: Hooks\build-solution-pre-hook.yml

# Set pipeline vars for tools paths.
- template: set-tools-paths.yml
    
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
  displayName: 'Install Power Platform Build Tools'

- pwsh: |
    $splitName = "$(Build.Repository.Name)".Split("/")
    $repoName = $splitName[$splitName.Length - 1]
    Write-Host "##vso[task.setvariable variable=RepoName]$repoName"
  displayName: 'Set Source Repo Name'
  condition: and(succeeded(), ne('${{parameters.buildType}}', 'Unmanaged'))

- template: Hooks\build-solution-manipulate-source-pre-hook.yml
  
# Solution version in source control is not used.  Instead, create version at build time from the current build number.
- pwsh: |
   Get-ChildItem -Path "$(Build.SourcesDirectory)\$(RepoName)\${{parameters.solutionName}}\SolutionPackage\**\Solution.xml" | 
   ForEach-Object {
        (Get-Content $_.FullName) `
            -replace '<Version>[\s\S]*?<\/Version>', '<Version>$(Build.BuildNumber)</Version>' |
        Out-File $_.FullName
   }
  displayName: 'Update Solution XML with Build Number'
  condition: and(succeeded(), ne('${{parameters.buildType}}', 'Unmanaged'))

# Before we committed changes, we formatted all json files for readability in source control.  This breaks solution package, so we need to flatten them before packing   
- pwsh: |
    #When we unpack the solution files, we format the json, but it causes solution import failures so we need to flatten the files
    Get-ChildItem -Path "$(Build.SourcesDirectory)\$(RepoName)\${{parameters.solutionName}}" -Recurse -Filter *.json |
    ForEach-Object {
        $fileContent = (Get-Content $_.FullName) -join ' '
        if(-not [string]::IsNullOrWhiteSpace($fileContent)) {
            Set-Content $_.FullName $fileContent
        }
    }
  displayName: 'Flatten JSON files'
  enabled: true

- pwsh: |
    $manifestVersion = ''
    $manifestPaths = Get-ChildItem -Path "$(Build.SourcesDirectory)\$(RepoName)\${{parameters.solutionName}}" -Recurse -Filter *CanvasManifest.json
    foreach($manifestPath in $manifestPaths) {
        $manifest = Get-Content $manifestPath.FullName | ConvertFrom-Json
        if($manifest.FormatVersion -ne '') {
            $manifestVersion = $manifest.FormatVersion
            break
        }
    }
    Write-Host "##vso[task.setvariable variable=ManifestVersion]$manifestVersion"
    Write-Host "Version: $manifestVersion"
  displayName: 'Get Unpacked Version'
  condition: succeeded()

# Pack canvas app source files into msapp
- pwsh: |
   $solutionSource = "$(Build.SourcesDirectory)\$(RepoName)\${{parameters.solutionName}}"
   # We need to keep the source of the canvas app in temp for later use in canvas test automation
   Copy-Item $solutionSource -Destination "$(Agent.TempDirectory)\${{parameters.solutionName}}" -Recurse -Force
   Get-ChildItem -Path $solutionSource -Recurse -Filter *_src | 
   ForEach-Object {     
     $unpackedPath = $_.FullName
     $packedFileName = $unpackedPath.Replace("_msapp_src", ".msapp")
     if(!(Test-Path $packedFileName)) {
        #Temporarily unpacking with latest version of Power Apps Language Tooling
        Write-Host "Packing via PowerShell"
        . "$env:POWERSHELLPATH/canvas-unpack-pack.ps1"
        Invoke-CanvasUnpackPack "pack" $unpackedPath $packedFileName
     }
     else {
        Write-Host "$packedFileName already exists. Skipping packing of the app."
     }
     Remove-Item -Path $unpackedPath -Recurse
   }
  displayName: 'pack msapp files'
  workingDirectory: $(PowerShellPath)
  enabled: true
  
# Set paths to deployment settings
- template: set-deployment-configuration-paths.yml
  parameters:
    configPath: $(Build.SourcesDirectory)\$(RepoName)\${{parameters.solutionName}}\config\
    environmentName: $(EnvironmentName)

# We'll store configuration data as artifacts on the build pipeline to be used during deployment. This includes configuration data created via Configuration data migration tool and deploymentSettings.json and customDeploymentSettings.json 
- pwsh: |
    . "$env:POWERSHELLPATH/archive-configuration-migration-data.ps1"
    Invoke-ArchiveConfigurationMigrationData '$(Build.SourcesDirectory)' '$(Build.ArtifactStagingDirectory)' '$(RepoName)' '${{parameters.solutionName}}'
  displayName: 'Archive Configuration Migration Data'    
    
# Third party task to replace tokens in files. The FileTransform above replaces JSON tokens based on their path as opposed to replacing text tokens in a file which can be more error prone in some cases.
# If you aren't using this task it can be safely removed or disabled by setting enabled: false. Sample token: #{VariableNameToReplace}#
- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace Tokens: deploymentSettings.json'
  inputs:
    rootDirectory: $(Build.SourcesDirectory)\$(RepoName)\${{parameters.solutionName}}\config\
    targetFiles: '*deploymentSettings*.json'
    actionOnMissing: 'silently continue'
    writeBOM: false
    encoding: 'utf-8'
    defaultValue: ''
  condition: and(succeeded(), or(ne(variables['DeploymentSettingsPath'], ''), ne(variables['CustomDeploymentSettingsPath'], '')))
  enabled: true

# Set deployment variable for Activate Flow Configuration
- template: set-deployment-variable.yml
  parameters:
    variableName: 'outActivateFlows'
    deploymentSettingsPath: $(CustomDeploymentSettingsPath)
    deploymentSettingsNode: 'ActivateFlowConfiguration'
    displayName: 'Retrieve Flow Activation Config for Build'

# Enabled or Disable Flows in the Solution based on configuration
- template: enable-disable-solution-flows.yml
  parameters:
    buildSourceDirectory: '$(Build.SourcesDirectory)'
    repo: '$(RepoName)'
    solutionName: '${{parameters.solutionName}}'
    disableAllFlows: 'false'
    activateFlowConfiguration: '$(outActivateFlows)'

- template: Hooks\build-solution-pack-pre-hook.yml

#Pack the solution based on the build type parameter (Unmanaged, Managed or Both)
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.pack-solution.PowerPlatformPackSolution@2
  displayName: 'Pack Solutions (Unmanaged and/or Managed)'
  inputs:
    SolutionSourceFolder: $(Build.SourcesDirectory)\$(RepoName)\${{parameters.solutionName}}\SolutionPackage
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}_$(Build.BuildNumber).zip'
    SolutionType: ${{parameters.buildType}}


#Run Solution Checker against our solution. This is currently only triggered for pipelines that trigger for Pull Requests
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.checker.PowerPlatformChecker@2
  displayName: 'Run Solution Checker'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: ${{parameters.serviceConnectionName}}
    FilesToAnalyze: '$(Build.ArtifactStagingDirectory)\${{parameters.solutionName}}_$(Build.BuildNumber).zip'
    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'
  condition: and(succeeded(), and(ne(variables['DisableSolutionChecker'], 'true'), eq(variables['Build.Reason'], 'PullRequest')))

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: drop

- template: Hooks\build-solution-post-hook.yml