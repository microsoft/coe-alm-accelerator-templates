parameters:
- name: repo
  type: string
- name: serviceConnection
  type: string
- name: solutionName
  type: string
- name: configurationData
  type: string
- name: generateEnvironmentVariables
  type: string
  default: 'true'
- name: generateConnectionReferences
  type: string
  default: 'true'
- name: generateOwnershipConfig
  type: string
  default: 'true'
- name: generateCanvasSharingConfig
  type: string
  default: 'true'
- name: generateAADGroupTeamConfig
  type: string
  default: 'false'
- name: overwriteExisting
  type: string
  default: 'false'

steps:
- powershell: |
    #Generate Deployment Settings
    $deploymentSettingsFilePath = '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\config\deploymentSettings.json'
    $customDeploymentSettingsFilePath = '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\config\customDeploymentSettings.json'
    if(!(Test-Path '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\config\')) {
        New-Item '$(Build.SourcesDirectory)\${{parameters.repo}}\${{parameters.solutionName}}\' -Name "config" -ItemType "directory"
    }
    Import-Module Microsoft.Xrm.Data.PowerShell -Force -RequiredVersion $(XrmDataPowerShellVersion) -ArgumentList @{ NonInteractive = $true }
    $conn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"
    $solutions = Get-CrmRecords -conn $conn -EntityLogicalName solution -FilterAttribute "uniquename" -FilterOperator "eq" -FilterValue "${{parameters.solutionName}}"
    $solutionId = $solutions.CrmRecords[0].solutionid

    $solutionComponentResults =  Get-CrmRecords -conn $conn -EntityLogicalName solutioncomponent -FilterAttribute "solutionid" -FilterOperator "eq" -FilterValue $solutionId -Fields componenttype, solutioncomponentid, objectid
    $connectionReferences = [System.Collections.ArrayList]@()
    $environmentVariables = [System.Collections.ArrayList]@()
    $canvasApps = [System.Collections.ArrayList]@()
    $flowOwnerships = [System.Collections.ArrayList]@()
    $flowActivations = [System.Collections.ArrayList]@()
    $groupTeams = [System.Collections.ArrayList]@()
    
    $cofigurationVariables = [System.Collections.ArrayList]@()

    $currentCustomConfiguration = [PSCustomObject]@{}
    $currentConfiguration = [PSCustomObject]@{}
    if('${{parameters.overwriteExisting}}' -ne 'true') {
        if(Test-Path $customDeploymentSettingsFilePath) {
            $existingCustomDeploymentSettings = Get-Content $customDeploymentSettingsFilePath -Raw
            if(-Not [string]::IsNullOrWhiteSpace($existingDeploymentSettings)) {
                $currentCustomConfiguration = ConvertFrom-Json $existingCustomDeploymentSettings
            }
        }

        if(Test-Path $deploymentSettingsFilePath) {
            $existingDeploymentSettings = Get-Content $deploymentSettingsFilePath -Raw
            if(-Not [string]::IsNullOrWhiteSpace($existingDeploymentSettings)) {
                $currentConfiguration = ConvertFrom-Json $existingDeploymentSettings
            }
        }
    }
    $currentConnectionReferences = $currentCustomConfiguration.ConnectionReferences
    $currentEnvironmentVariables = $currentCustomConfiguration.EnvironmentVariables
    $currentCanvasApps = $currentCustomConfiguration.AadGroupCanvasConfiguration
    $currentFlows = $currentCustomConfiguration.SolutionComponentOwnershipConfiguration
    $currentFlowActivations = $currentCustomConfiguration.ActivateFlowConfiguration
    $currentGroupTeams = $currentCustomConfiguration.AadGroupTeamConfiguration

    foreach($solutioncomponent in $solutionComponentResults.CrmRecords)
    {
        #Connection Reference
        if($solutioncomponent.componenttype_Property.Value.Value -eq 10027 -and '${{parameters.generateConnectionReferences}}' -ne 'false') {
            # "ConnectionReferences": [
            # {
            #    "LogicalName": "cat_CDS_Current",
            #    "ConnectionId": "#{stage.cr.cat_CDS_Current}#",
            #    "ConnectorId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
            # }
            #]
            $connRefResult = Get-CrmRecord -conn $conn -EntityLogicalName connectionreference -Id $solutionComponent.objectid -Fields connectionreferencelogicalname, connectorid
            $connRef = $null
            $connRefName = $connRefResult.connectionreferencelogicalname
            $connectorId = $connRefResult.connectorid
            $currentConnectionReferences | Foreach-Object { if($_.LogicalName -eq $connRefName) { $connRef = $_ } }
            $connnectionConfigVariable = "#{connectionreference." + $connRefName + "}#"
            if($connRef -eq $null) {
                $connRef = [PSCustomObject]@{"LogicalName"="$connRefName"; "ConnectionId"="$connnectionConfigVariable"; "ConnectorId"= "$connectorId" }
            }
            $cofigurationVariables.Add($connnectionConfigVariable)
            $connectionReferences.Add($connRef)
        }
        #Environment Variable Definition
        elseif($solutioncomponent.componenttype_Property.Value.Value -eq 380 -and '${{parameters.generateEnvironmentVariables}}' -ne 'false') {
              #"EnvironmentVariables": [
              #{
              #  "SchemaName": "cat_ConnectorBaseUrl",
              #  "Value": "#{environmentvariable.cat_ConnectorBaseUrl}#"
              #},
              #{
              #  "SchemaName": "cat_ConnectorHostUrl",
              #  "Value": "#{environmentvariable.cat_ConnectorHostUrl}#"
              #}
            #]
            $envVarResult =  Get-CrmRecord -conn $conn -EntityLogicalName environmentvariabledefinition -Id $solutionComponent.objectid -Fields schemaname
            $envVar = $null
            $envVarName = $envVarResult.schemaname

            $currentEnvironmentVariables | Foreach-Object { if($_.SchemaName -eq $envVarName) { $envVar = $_ } }
            $envVarConfigVariable = "#{environmentvariable." + $envVarName + "}#"
            if($envVar -eq $null) {
                $envVar = [PSCustomObject]@{"SchemaName"="$envVarName"; "Value"="$envVarConfigVariable" }
            }
            $cofigurationVariables.Add($envVarConfigVariable)
            $environmentVariables.Add($envVar)
        }
        #Canvas App
        elseif($solutioncomponent.componenttype_Property.Value.Value -eq 300 -and '${{parameters.generateCanvasSharingConfig}}' -ne 'false') {
            #"AadGroupCanvasConfiguration": [
            # {
            #    "aadGroupId": "#{canvasshare.aadGroupId}#",
            #    "canvasNameInSolution": "cat_devopskitsamplecanvasapp_c7ec5",
            #    "canvasDisplayName": "cat_devopskitsamplecanvasapp_c7ec5",
            #    "roleName": "#{canvasshare.roleName}#"
            # }
            #]
            $canvasAppResult =  Get-CrmRecord -conn $conn -EntityLogicalName canvasapp -Id $solutionComponent.objectid -Fields solutionid, name, displayname
            $canvasConfig = $null
            $canvasName = $canvasAppResult.name
            $currentCanvasApps | Foreach-Object { if($_.canvasNameInSolution -eq $canvasName) { $canvasConfig = $_ } }
            $aadGroupConfigVariable = "#{canvasshare.aadGroupId." + $canvasName + "}#"
            $groupRoleConfigVariable = "#{canvasshare.roleName." + $canvasName + "}#"
            if($canvasConfig -eq $null) {
                $canvasConfig = [PSCustomObject]@{"aadGroupId"="$aadGroupConfigVariable"; "canvasNameInSolution"=$canvasName; "canvasDisplayName"= $canvasAppResult.displayname; "roleName"="$groupRoleConfigVariable"}
            }
            $cofigurationVariables.Add($aadGroupConfigVariable)
            $cofigurationVariables.Add($groupRoleConfigVariable)
            $canvasApps.Add($canvasConfig)
        }
        #Workflow
        elseif($solutioncomponent.componenttype_Property.Value.Value -eq 29 -and '${{parameters.generateOwnershipConfig}}' -ne 'false') {
            #"SolutionComponentOwnershipConfiguration": [
            #{
            #  "solutionComponentType": 29,
            #  "solutionComponentUniqueName": "71cc728c-2487-eb11-a812-000d3a8fe6a3",
            #  "solutionComponentName": My Flow,
            #  "ownerEmail": "#{owner.ownerEmail}#"
            #},
            #{
            #  "solutionComponentType": 29,
            #  "solutionComponentUniqueName": "d2f7f0e2-a1a9-eb11-b1ac-000d3a53c3c2",
            #  "solutionComponentName": My Other Flow,
            #  "ownerEmail": "#{owner.ownerEmail}#"
            #}
            #]
            $flowResult =  Get-CrmRecord -conn $conn -EntityLogicalName workflow -Id $solutionComponent.objectid -Fields solutionid, name
            $flowConfig = $null
            $flowActivationConfig = $null
            $workflowName = $solutionComponent.objectid
            $placeholdername = $flowResult.name.replace(' ','') + '.' + $solutionComponent.objectid
            $currentFlows | Foreach-Object { if($_.solutionComponentUniqueName -eq $workflowName) { $flowConfig = $_ } }
            $currentFlowActivations | Foreach-Object { if($_.solutionComponentUniqueName -eq $workflowName) { $flowActivationConfig = $_ } }
            $ownerConfigVariable = "#{owner.ownerEmail." + $placeholdername + "}#"
            if($flowConfig -eq $null) {
                $flowConfig = [PSCustomObject]@{"solutionComponentType"=$solutioncomponent.componenttype_Property.Value.Value; "solutionComponentName"=$flowResult.name; "solutionComponentUniqueName"=$workflowName; "ownerEmail"="$ownerConfigVariable"}
            }
            $cofigurationVariables.Add($ownerConfigVariable)
            $flowOwnerships.Add($flowConfig)

            $activateConfigVariable = "#{activateflow.activateas." + $placeholdername + "}#"
            if($flowActivationConfig -eq $null) {
                $flowActivationConfig = [PSCustomObject]@{"solutionComponentName"=$flowResult.name; "solutionComponentUniqueName"=$workflowName; "activateAsUser"="$activateConfigVariable"}
            }
            $cofigurationVariables.Add($activateConfigVariable)
            $flowActivations.Add($flowActivationConfig)
        }
    }

    if('${{parameters.generateAADGroupTeamConfig}}' -ne 'false') {
        #"AadGroupTeamConfiguration": [
        #{
        #    "aadGroupTeamName": "alm-accelerator-sample-solution",
        #    "aadSecurityGroupId": "#{team.aadSecurityGroupId}#",
        #    "dataverseSecurityRoleNames": [
        #    "ALM Accelerator Sample Role"
        #    ]
        #}
        #]
        $aadGroupConfigVariable = "#{team.samplegroupteamname.aadSecurityGroupId}#"
        $teamRoleConfigVariable = "#{team.samplegroupteamname.role}#"
        $groupTeamConfig = [PSCustomObject]@{"aadGroupTeamName"="Sample Group Team Name"; "aadSecurityGroupId"="$aadGroupConfigVariable"; "dataverseSecurityRoleNames"=@("$teamRoleConfigVariable")}
        $cofigurationVariables.Add($aadGroupConfigVariable)
        $cofigurationVariables.Add($teamRoleConfigVariable)
        $groupTeams.Add($groupTeamConfig)
    }

    $newConfiguration = [PSCustomObject]@{}
    $newConfiguration | Add-Member -MemberType NoteProperty -Name 'EnvironmentVariables' -Value $environmentVariables
    $newConfiguration | Add-Member -MemberType NoteProperty -Name 'ConnectionReferences' -Value $connectionReferences

    $json = ConvertTo-Json -Depth 10 $newConfiguration
    Set-Content -Path $deploymentSettingsFilePath -Value $json

    $newCustomConfiguration = [PSCustomObject]@{}
    $newCustomConfiguration | Add-Member -MemberType NoteProperty -Name 'ActivateFlowConfiguration' -Value $flowActivations
    $newCustomConfiguration | Add-Member -MemberType NoteProperty -Name 'SolutionComponentOwnershipConfiguration' -Value $flowOwnerships
    $newCustomConfiguration | Add-Member -MemberType NoteProperty -Name 'AadGroupCanvasConfiguration' -Value $canvasApps
    $newCustomConfiguration | Add-Member -MemberType NoteProperty -Name 'AadGroupTeamConfiguration' -Value $groupTeams

    #Convert the updated configuration to json and store in customDeploymentSettings.json
    $json = ConvertTo-Json -Depth 10 $newCustomConfiguration
    Set-Content -Path $customDeploymentSettingsFilePath -Value $json
    #If configuration data was passed in use this to set the pipeline variable values
    $newConfigurationData = [System.Collections.ArrayList]@()
    if(-Not [string]::IsNullOrWhiteSpace('${{parameters.configurationData}}') -and '${{parameters.configurationData}}' -ne '$(Data)') {
        #The configuration data will point to the records in Dataverse that store the JSON to set pipeline variables
        $configCriterias = ConvertFrom-Json '${{parameters.configurationData}}'
        $settingsConn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)$($configCriterias.EnvironmentUrl)"
        #Add the cat_usersetting records to an array
        foreach($configCriteria in $configCriterias.UserSettingId) {
            $userSetting = Get-CrmRecord -conn $settingsConn -EntityLogicalName cat_usersetting -Id $configCriteria.cat_usersettingid -Fields cat_data
            $newConfigurationData.Add($userSetting)
        }
    }
    #Update / Create Deployment Pipelines
    $buildDefinitionResourceUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProjectId)/_apis/build/definitions?name=deploy-*-${{parameters.solutionName}}&includeAllProperties=true&api-version=6.0"
    $fullBuildDefinitionResponse = Invoke-RestMethod $buildDefinitionResourceUrl -Method Get -Headers @{
        Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
    }
    $buildDefinitionResponseResults = $fullBuildDefinitionResponse.value
    #Loop through the build definitions we found and update the pipeline variables based on the placeholders we put in the deployment settings files.
    foreach($buildDefinitionResult in $buildDefinitionResponseResults)
    {
        #Getting the build definition id and variables to be updated
        $definitionId = $buildDefinitionResult.id
        $newBuildDefinitionVariables = $buildDefinitionResult.variables
        #Loop through each of the tokens stored above and find an associated variable in the configuration data passed in from AA4AM
        foreach($configurationVariable in $cofigurationVariables) {
            $found = $false
            $configurationVariable = $configurationVariable.replace('#{', '')
            $configurationVariable = $configurationVariable.replace('}#', '')

            #See if the variable already exists
            foreach($buildVariable in $newBuildDefinitionVariables.PSObject.Properties) {
                if($buildVariable.Name -eq $configurationVariable) {
                    $found = $true
                    break
                }
            }
            #If the variable was not found create it 
            if(!$found) {
                $newBuildDefinitionVariables | Add-Member -MemberType NoteProperty -Name $configurationVariable -Value @{value = ''}
            }
            # Set the value to the value passed in on the configuration data
            if($newConfigurationData -ne $null) {
                foreach($newEnvironmentConfig in $newConfigurationData) {
                    foreach($variableConfigurationJson in $newEnvironmentConfig.cat_data) {
                        #Convert the JSON in the cat_data field to an object
                        $variableConfiguration = ConvertFrom-Json $variableConfigurationJson
                        foreach($variable in $variableConfiguration) {
                            if($variable.Build -eq $buildDefinitionResult.name -and $variable.Name -eq $configurationVariable) {
                                if($variable.Value -eq $null -or [string]::IsNullOrWhiteSpace($variable.Value)) {
                                    $newBuildDefinitionVariables.$configurationVariable.value = ''
                                }
                                else {
                                    $newBuildDefinitionVariables.$configurationVariable.value = $variable.Value
                                }
                                break
                            }
                        }
                    }
                }
            }
        }
        #Set the build definition variables to the newly created list
        $buildDefinitionResult.variables = $newBuildDefinitionVariables
        $buildDefinitionResourceUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProjectId)/_apis/build/definitions/" + $definitionId + "?api-version=6.0"
        $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
        $headers.Add("Authorization", "Bearer $env:SYSTEM_ACCESSTOKEN")
        $headers.Add("Content-Type", "application/json")
        $body = ConvertTo-Json -Depth 10 $buildDefinitionResult
        Invoke-RestMethod $buildDefinitionResourceUrl -Method 'PUT' -Headers $headers -Body ([System.Text.Encoding]::UTF8.GetBytes($body)) | Out-Null
    }
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Update Deployment Settings'
  condition: succeeded()
