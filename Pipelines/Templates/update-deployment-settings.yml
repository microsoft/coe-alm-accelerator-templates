parameters:
- name: orgUrl
  type: string
- name: projectName
  type: string
- name: repo
  type: string
- name: serviceConnection
  type: string
- name: solutionName
  type: string
- name: configurationData
  type: string
- name: useDeploymentSettingsPlaceholders
  type: string
  default: 'true'

steps:
- powershell: |
      # load PowerShell files into memory
      . "$env:POWERSHELLPATH/update-deployment-settings.ps1"

      # We need the project and repository where the yaml for this pipeline exists. Unfortunately, there's no way to get this directly from any of the available 
      # predefined variables. We can get the repository name from $(Build.Repository.Name). However, there's no similar variable for the project name associated 
      # with the repository as $(System.TeamProject) refers to where the pipeline that consumes this YAML was created. In the case that the pipelines are hosted in
      # another project the only way to get both of these is to parse $(Build.Repository.Uri) which has both the project and repo name.
      #Name  : $(Build.Repository.Uri)
      #Value : https://[ORGNAME]@dev.azure.com/[ORGNAME]/[PROJECTNAME]/_git/[REPONAME]
      # Parsing this could be brittle and have side effects so we've included the ability to set variables to override this parsing (i.e. PipelineProject and PipelineRepository)
      # These can be set as global variables in the alm-accelerator-variable-group.

      #Default to pipeline project and repo to the project where the pipeline is running and the and repo of this yaml
      $pipelineProject = "$(System.TeamProject)"
      $pipelineRepo = "$(Build.Repository.Name)"

      $segments = ([System.Uri]"$(Build.Repository.Uri)").LocalPath.Split("/")

      #Use the parsed value from the repo uri if it follows the expected format
      if($segments.Length -gt 3) {
        $pipelineProject = $segments[2]
        $pipelineRepo = $segments[4]
      }

      #Finally, use the override variables to bypass the options above
      if(!'$(PipelineProject)'.Contains("PipelineProject")) {
        $pipelineProject = "$(PipelineProject)"
      }
      if(!'$(PipelineRepository)'.Contains("PipelineRepository")) {
        $pipelineRepo = "$(PipelineRepository)"
      }

      #Call the deployment settings powershell
      Set-DeploymentSettingsConfiguration '$(Build.SourcesDirectory)' '$(Agent.BuildDirectory)\PipelineUtils' "$pipelineProject" "$pipelineRepo" '$(connectionVariables.BuildTools.DataverseConnectionString)' '$(XrmDataPowerShellVersion)' '$(CoETools_Microsoft_Xrm_Data_PowerShell)' '${{parameters.orgUrl}}' '${{parameters.projectName}}' '${{parameters.repo}}' 'Bearer' '${{parameters.serviceConnection}}' '${{parameters.solutionName}}' '$(Agent.OS)' '${{parameters.useDeploymentSettingsPlaceholders}}'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    DEPLOYMENT_SETTINGS: ${{parameters.configurationData}}
  displayName: 'Update Deployment Settings'
  condition: and(succeeded(), ne(variables.GenerateDeploymentSettings, 'false'))