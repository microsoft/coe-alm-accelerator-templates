parameters:
- name: orgUrl
  type: string
- name: projectName
  type: string
- name: repo
  type: string
- name: serviceConnection
  type: string
- name: solutionName
  type: string
- name: configurationData
  type: string
- name: useDeploymentSettingsPlaceholders
  type: string
  default: 'true'

steps:
- powershell: |
      # load PowerShell files into memory
      . "$env:POWERSHELLPATH/update-deployment-settings.ps1"

      #Check to see if pipeline project and repo have been overridden
      $pipelineProject = "$(System.TeamProject)"
      if(!'$(PipelineProject)'.Contains("PipelineProject")) {
        $pipelineProject = "$(PipelineProject)"
      }

      $pipelineRepo = "$(Build.Repository.Name)"
      if(!'$(PipelineRepository)'.Contains("PipelineRepository")) {
        $pipelineRepo = "$(PipelineRepository)"
      }

      #Call the deployment settings powershell
      Set-DeploymentSettingsConfiguration '$(Build.SourcesDirectory)' '$(Agent.BuildDirectory)\PipelineUtils' "$pipelineProject" "$pipelineRepo" '$(connectionVariables.BuildTools.DataverseConnectionString)' '$(XrmDataPowerShellVersion)' '$(CoETools_Microsoft_Xrm_Data_PowerShell)' '${{parameters.orgUrl}}' '${{parameters.projectName}}' '${{parameters.repo}}' 'Bearer' '${{parameters.serviceConnection}}' '${{parameters.solutionName}}' '$(Agent.OS)' '${{parameters.useDeploymentSettingsPlaceholders}}'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    DEPLOYMENT_SETTINGS: ${{parameters.configurationData}}
  displayName: 'Update Deployment Settings'
  condition: and(succeeded(), ne(variables.GenerateDeploymentSettings, 'false'))