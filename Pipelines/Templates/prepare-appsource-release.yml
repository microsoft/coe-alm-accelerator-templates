# This template read solutions from 'releaseassets' and generate a AppSourcePackage
parameters:
- name: projectName
  type: string
- name: solutionsFolderPath
  type: string
- name: packageDeployerProjectName
  type: string
- name: packageFileName
  type: string
- name: appSourceFolderName
  type: string
- name: pdProjectPath
  type: string
- name: generateAppSourcePackage
  type: boolean
  default: false
- name: generatePackageDeployerPackage
  type: boolean
  default: false
- name: packageConfigFilePath
  type: string

steps:
- pwsh: |
    $packageFileName = "${{parameters.packageFileName}}"
    $appSourceFolderName = "${{parameters.appSourceFolderName}}"
    $generateAppSourcePackage = "${{parameters.generateAppSourcePackage}}"
    $generatePackageDeployerPackage = "${{parameters.generatePackageDeployerPackage}}"
    $pdProjectPath = "${{parameters.pdProjectPath}}"
    Write-Host "packageConfigFilePath - ${{parameters.packageConfigFilePath}}"
    Write-Host "packageFileName - $packageFileName"
    Write-Host "appSourceFolderName - $appSourceFolderName"
    Write-Host "pdProjectPath - $pdProjectPath"
    Write-Host "generateAppSourcePackage - $generateAppSourcePackage"
    Write-Host "generatePackageDeployerPackage - $generatePackageDeployerPackage"
    Write-Host "##vso[task.setVariable variable=RunAppSourceTasks]$generateAppSourcePackage"
    Write-Host "##vso[task.setVariable variable=RunPackageDeployerTasks]$generatePackageDeployerPackage"
  displayName: 'Print and Set Params'  
  
- pwsh: |
    $assetsPath = "$(Pipeline.Workspace)\releaseassets"
    if(Test-Path "$assetsPath"){
        Get-ChildItem "$assetsPath" -Recurse
    }
    else{
        Write-Host "Invalid assets path - " $assetsPath
    }
  displayName: 'Print initial releaseassets'
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))

- pwsh: |
    $releaseZipname = "${{parameters.appSourceFolderName}}"
    if('$(Build.BuildNumber)'.Contains("Build.BuildNumber")) {
        Write-Host "Build number unavailable"
    }
    else{
        $releaseZipname = $releaseZipname + "_$(Build.BuildNumber)"
    }

    # Suffix extension (i.e.,zip) 
    $releaseZipname = $releaseZipname + ".zip"
    Write-Host "releaseZipname - $releaseZipname"
    Write-Host "##vso[task.setVariable variable=appSourceReleasePackageName]$releaseZipname"
  displayName: 'Set appSourceReleasePackageName'
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))

- pwsh: |
    $assetsPath = '$(Build.SourcesDirectory)'
    if(Test-Path "$assetsPath"){
        Get-ChildItem "$assetsPath" -Recurse
    }
    else{
        Write-Host "Invalid assets path - " $assetsPath
    }
  displayName: 'Print (Build.SourcesDirectory)'
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))
  
- pwsh: |
      . "$(Pipeline.Workspace)/PipelineUtils/PowerShell/app-source-helper.ps1"
      Install-Pac-Cli ""
  displayName: 'Install and set pac tools path'
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))
  
- pwsh: |
    $packageDeployerProjectName = "${{parameters.packageDeployerProjectName}}"
    $solutionsFolderPath = "${{parameters.solutionsFolderPath}}"
    Write-Host "Solutions FolderPath - $solutionsFolderPath"
    $packageDeployerConfigSettingsPath = "${{parameters.packageConfigFilePath}}"

    . "$(Pipeline.Workspace)/PipelineUtils/PowerShell/app-source-helper.ps1"
    Invoke-Add-Solution-References-To-Package-Project "$(pacPath)" "${{parameters.pdProjectPath}}" "$solutionsFolderPath" "$packageDeployerConfigSettingsPath" "${{parameters.projectName}}"
  displayName: "Add solution references to package project"
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))

- pwsh: |
    . "$(Pipeline.Workspace)/PipelineUtils/PowerShell/app-source-helper.ps1"
    Update-Package-Name "${{parameters.pdProjectPath}}" "${{parameters.packageDeployerProjectName}}"
  displayName: "Update Package Name of PD Project"
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))  

- pwsh: |
    $packageDeployerProjectName = "${{parameters.packageDeployerProjectName}}"
    
    . "$(Pipeline.Workspace)/PipelineUtils/PowerShell/app-source-helper.ps1"
    Invoke-Trigger-Dotnet-Publish "${{parameters.pdProjectPath}}"
  displayName: "Trigger dotnet publish"
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))

- pwsh: |
    $appSourcePackageProjectBinPath = "${{parameters.pdProjectPath}}\bin"    
    if(Test-Path "$appSourcePackageProjectBinPath"){
        Get-ChildItem "$appSourcePackageProjectBinPath" -Recurse
    }
    else{
        Write-Host "appSourcePackageProject bin unavailable at - $appSourcePackageProjectBinPath"
    }
  displayName: 'Print AppsourcePackageProject bin post publish'
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))
  
- pwsh: |
    $packageDeployerProjectName = "${{parameters.packageDeployerProjectName}}"
    $pdProjectAssetsFolderPath = "${{parameters.pdProjectPath}}\AppSourceAssets"
    $releaseAssetsDirectory = "$(Pipeline.Workspace)\releaseassets"

    . "$(Pipeline.Workspace)/PipelineUtils/PowerShell/app-source-helper.ps1"
    Copy-Published-Assets-To-AppSourceAssets "${{parameters.pdProjectPath}}" "$pdProjectAssetsFolderPath" "$(Pipeline.Workspace)\releaseassets" "${{parameters.packageFileName}}"
  displayName: "Move built Package Deployer (i.e.,pdpkg) to Releaseassets and AppSourceAssets"
  condition: and(succeeded(), or(eq(variables['RunAppSourceTasks'], 'true'), eq(variables['RunPackageDeployerTasks'], 'true')))   
  
- pwsh: |
    $packageDeployerProjectName = "${{parameters.packageDeployerProjectName}}"
    #$packageDeployerProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$packageDeployerProjectName"
    $pdProjectAssetsFolderPath = "${{parameters.pdProjectPath}}\AppSourceAssets"
    $inputFilePath = "$pdProjectAssetsFolderPath\Input.xml"
    
    if(Test-Path "$inputFilePath"){
        . "$(Pipeline.Workspace)/PipelineUtils/PowerShell/app-source-helper.ps1"
        Update-Input-File "$inputFilePath" "${{parameters.packageFileName}}" "$(SolutionAnchorName)"
    }
    else{
        Write-Host "Input.xml unavailable at - $inputFilePath"
    }
  displayName: "Update InputFile from AppSourceAssets"
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'), eq(variables['RunAppSourceTasks'], 'true'))
  
- pwsh: |
    $packageDeployerProjectName = "${{parameters.packageDeployerProjectName}}"
    #$packageDeployerProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$packageDeployerProjectName"
    $pdProjectAssetsFolderPath = "${{parameters.pdProjectPath}}\AppSourceAssets"
    if(Test-Path "$pdProjectAssetsFolderPath"){
        Get-ChildItem "$pdProjectAssetsFolderPath" -Recurse
    }
    else{
        Write-Host "appSourceAssetsPath unavailable at - $pdProjectAssetsFolderPath"
    }
  displayName: 'Print AppSourceAssets folder'  
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'), eq(variables['RunAppSourceTasks'], 'true'))

- pwsh: |
    $packageDeployerProjectName = "${{parameters.packageDeployerProjectName}}"
    $pdProjectAssetsFolderPath = "${{parameters.pdProjectPath}}\AppSourceAssets"
    $releaseArtifactsPath = "$(Pipeline.Workspace)\releaseassets"
    
    . "$(Pipeline.Workspace)/PipelineUtils/PowerShell/app-source-helper.ps1"
    Move-PDProjectAppSourceAssets-to-Release-Path "$pdProjectAssetsFolderPath" "$releaseArtifactsPath" "$(appSourceReleasePackageName)"
  displayName: "Move AppSourceAssets to Release Assets and compress"
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'), eq(variables['RunAppSourceTasks'], 'true'))

- pwsh: |
    if(Test-Path "$(Pipeline.Workspace)\releaseassets\AppsourcePackage"){
        Get-ChildItem "$(Pipeline.Workspace)\releaseassets\AppsourcePackage" -Recurse
    }
    else{
        Write-Host "Invalid path $(Pipeline.Workspace)\releaseassets\AppsourcePackage"
    }
  displayName: 'Print AppsourcePackage from release assets folder'
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'), eq(variables['RunAppSourceTasks'], 'true'))
  
- pwsh: |
    $assetsPath = "$(Pipeline.Workspace)\releaseassets"
    if(Test-Path "$assetsPath"){
        Get-ChildItem "$assetsPath" -Recurse
    }
    else{
        Write-Host "Invalid assets path - " $assetsPath
    }
  displayName: 'Print final releaseassets'
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'), eq(variables['RunAppSourceTasks'], 'true'))
