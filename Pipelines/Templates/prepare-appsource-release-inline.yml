# This template deploys a solution built by build-Solution.yml and configures the solution in the target environment.
parameters:
- name: solutionsFolderPath
  type: string
- name: parAppSourcePackageProjectPath
  type: string
- name: packageFileName
  type: string
- name: solutionAnchorName
  type: string
- name: cacheEnabled
  type: string
  default: 'true'

steps:
# Checkout Pipelines
- checkout: Self
  #path: 'PipelineUtils'
  #displayName: 'Checkout Pipeline Branch'
  
- pwsh: |
    $releaseZipname = "Microsoft_CreatorKitPackage.zip"
    if('$(Build.BuildNumber)'.Contains("Build.BuildNumber")) {
        Write-Host "Build number unavailable"
    }
    else{
        $releaseZipname = "Microsoft_CreatorKitPackage_$(Build.BuildNumber).zip"
    }

    Write-Host "releaseZipname - $releaseZipname"
    Write-Host "##vso[task.setVariable variable=appSourceReleasePackageName]$releaseZipname"
  displayName: 'Set appSourceReleasePackageName'  

- pwsh: |
    $assetsPath = '$(Build.SourcesDirectory)'
    if(Test-Path "$assetsPath"){
        Get-ChildItem "$assetsPath" -Recurse
    }
    else{
        Write-Host "Invalid assets path - " $assetsPath
    }
  displayName: 'Print (Build.SourcesDirectory)'  
  
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
  displayName: 'Install Power Platform Build Tools'
  
- powershell: |
    #NOTE: Add new versions of canvas unpack and the associated pac CLI version to the versionDictionary to ensure unpacked versions are packed correctly.
    #.24 is the only version supported in the release of our pipelines the latest version of PAC CLI should be used until a new version is available at which time we
    #would add new versions here
    $versionDictionary = @{ "0.24" = ""}

    $nugetPackage = "Microsoft.PowerApps.CLI"
    $nugetPackageVersion = ""

    $outFolder = "pac"
    if($nugetPackageVersion -ne '') {
        nuget install $nugetPackage -Version $nugetPackageVersion -OutputDirectory $outFolder
    }
    else {
        nuget install $nugetPackage -OutputDirectory $outFolder
    }
    $pacNugetFolder = Get-ChildItem $outFolder | Where-Object {$_.Name -match $nugetPackage + "."}
    $pacPath = $pacNugetFolder.FullName + "\tools"
    echo "##vso[task.setvariable variable=pacPath]$pacPath"
  displayName: 'Install pac cli'  
  
- pwsh: |
    $projectPath = "${{parameters.parAppSourcePackageProjectPath}}"
    $appSourcePackageProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$projectPath"
    $solutionsFolderPath = "${{parameters.solutionsFolderPath}}"
    Write-Host "appSourcePackageProjectPath - $appSourcePackageProjectPath"
    Write-Host "solutionsFolderPath - $solutionsFolderPath"
    $appSourceInputFilePath = "$appSourcePackageProjectPath\appsource_input.json"

     if(Test-Path $solutionsFolderPath){
         if(Test-Path $appSourcePackageProjectPath)
         {
            $pacexepath = "$(pacPath)\pac.exe"
            if(Test-Path "$pacexepath")
            {
                Get-ChildItem "$solutionsFolderPath" | Where {$_.Name -match '_managed.zip'} |
                #Get-ChildItem "$solutionsFolderPath" -Filter *.managed.zip | 
                Foreach-Object {
                    $solutionName = $_.Name
                    $solutionPath = $_.FullName
                    Write-Host "Fetching import order of Solution - " $solutionName
                    
                    $importOrder = 0
                        if(Test-Path "$appSourceInputFilePath"){
                            $appSourceInputData = Get-Content "$appSourceInputFilePath" | ConvertFrom-Json        
                            foreach($solution in $appSourceInputData.Configdatastorage.Solutions){
                              if("$solutionName" -match $solution.Name){
                                  $importOrder = $solution.Importorder
                                  Write-Host "Given Solution - $solutionName MACTHED with appSource Solution - "$solution.Name
                                  break;
                              }
                              else{
                                 #Write-Host "Given Solution - $solutionName not matched with appSource Solution - "$solution.Name
                              }
                            }
                        }
                        else{
                            Write-Host "appSourceInputPath is unavailble at {$appSourceInputFilePath}"
                        }

                        Write-Host "importOrder - $importOrder"

                    $pacCommand = "package add-solution --path $solutionPath --import-order $importOrder --import-mode async"
                    Write-Host "Pac Command - $pacCommand"
                    if($importOrder -ne 0){
                        Write-Host "Pointing to $appSourcePackageProjectPath path" 
                        Set-Location -Path $appSourcePackageProjectPath
                        Invoke-Expression -Command "$pacexepath $pacCommand"
                    }
                    else{
                        Write-Host "Invalid import order for Solution - $solutionName"
                    }
                }
            }
            else{
                Write-Host "Invalid pac exe path $pacexepath"
            }
         }
         else{
              Write-Host "Invalid app source folder path - $appSourcePackageProjectPath"
         }
     }
    else{
        Write-Host "Invalid solutions folder path - $solutionsFolderPath"
    }
  displayName: "Add solution references to package project"

- pwsh: |
    $projectPath = "${{parameters.parAppSourcePackageProjectPath}}"
    $appSourcePackageProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$projectPath"
    
    Write-Host "Pointing to package project folder path - " $appSourcePackageProjectPath
    if(Test-Path $appSourcePackageProjectPath){
        Set-Location -Path $appSourcePackageProjectPath
        dotnet publish
    }
    else{
        Write-Host "Path unavailble; $appSourcePackageProjectPath"
    }
  displayName: "Trigger dotnet publish"

- pwsh: |
    $projectPath = "${{parameters.parAppSourcePackageProjectPath}}"
    $appSourcePackageProjectBinPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$projectPath\bin"    
    if(Test-Path "$appSourcePackageProjectBinPath"){
        Get-ChildItem "$appSourcePackageProjectBinPath" -Recurse
    }
    else{
        Write-Host "appSourcePackageProject bin unavailable at - $appSourcePackageProjectBinPath"
    }
  displayName: 'Print AppsourcePackageProject bin post publish'

- pwsh: |
    $projectPath = "${{parameters.parAppSourcePackageProjectPath}}"
    $appSourcePackageProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$projectPath"
    $appSourceAssetsPath = "$appSourcePackageProjectPath\AppSourceAssets"
    
    $pdpkgFileCount = 0
    $appSourcePackageFound = $false

    if(Test-Path "$appSourcePackageProjectPath\bin\Release"){
        $pdpkgFileCount = (Get-ChildItem "$appSourcePackageProjectPath\bin\Release" -Filter *pdpkg.zip | Measure-Object).Count
        Write-Host "Count of .pdpkg.zip from $appSourcePackageProjectPath\bin\Release - "$pdpkgFileCount
        if($pdpkgFileCount -gt 0){
            Write-Host "pdpkg file found under $appSourcePackageProjectPath\bin\Release"
            Write-Host "Copying pdpkg.zip file to $appSourceAssetsPath\$packageFileName"
            #Get-ChildItem "$appSourcePackageProjectPath\bin\Release" -Filter *pdpkg.zip | Copy-Item -Destination "$appSourceAssetsPath" -Force -PassThru
            Get-ChildItem "$appSourcePackageProjectPath\bin\Release" -Filter *pdpkg.zip | Copy-Item -Destination "$appSourceAssetsPath\$packageFileName" -Force -PassThru
            $appSourcePackageFound = $true
        }
        else{
            Write-Host "pdpkg.zip not found under $appSourcePackageProjectPath\bin\Release"
        }
    }

    if(($pdpkgFileCount -eq 0) -and (Test-Path "$appSourcePackageProjectPath\bin\Debug")){
        $pdpkgFileCount = (Get-ChildItem "$appSourcePackageProjectPath\bin\Debug" -Filter *pdpkg.zip | Measure-Object).Count
        Write-Host "Count of .pdpkg.zip from $appSourcePackageProjectPath\bin\Debug - "$pdpkgFileCount
        if($pdpkgFileCount -gt 0){
            Write-Host "pdpkg file found under $appSourcePackageProjectPath\bin\Debug"
            Write-Host "Copying pdpkg.zip file to $appSourceAssetsPath\$packageFileName"
            Get-ChildItem "$appSourcePackageProjectPath\bin\Debug" -Filter *pdpkg.zip | Copy-Item -Destination "$appSourceAssetsPath\$packageFileName" -Force -PassThru
            $appSourcePackageFound = $true
        }
        else{
            Write-Host "pdpkg.zip not found under $appSourcePackageProjectPath\bin\Debug"
        }
    }

    if($pdpkgFileCount -eq 0){
        Write-Host "pdpkg.zip not found; Exiting"
    }

    Write-Host "##vso[task.setVariable variable=AppSourcePackageFound]$appSourcePackageFound"
  displayName: "Move built pdpkg to AppSourceAssets"

- pwsh: |
    $projectPath = "${{parameters.parAppSourcePackageProjectPath}}"
    $appSourcePackageProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$projectPath"
    $appSourceAssetsPath = "$appSourcePackageProjectPath\AppSourceAssets"
    if(Test-Path "$appSourceAssetsPath"){
        Get-ChildItem "$appSourceAssetsPath" -Recurse
    }
    else{
        Write-Host "appSourceAssetsPath unavailable at - $appSourceAssetsPath"
    }
  displayName: 'Print AppSourceAssets folder'

- pwsh: |
    $projectPath = "${{parameters.parAppSourcePackageProjectPath}}"
    $appSourcePackageProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$projectPath"
    $appSourceAssetsPath = "$appSourcePackageProjectPath\AppSourceAssets"
    $inputFilePath = "$appSourceAssetsPath\Input.xml"

    if(Test-Path "$inputFilePath"){
        [xml]$xmlDoc = Get-Content -Path $inputFilePath

        $todayDate = (Get-Date).ToString('MM-dd-yyyy')
        $futureDate = (Get-Date).AddMonths(12).ToString('MM-dd-yyyy')
        $xmlDoc.PvsPackageData.StartDate = $todayDate
        $xmlDoc.PvsPackageData.EndDate = $futureDate
        $xmlDoc.PvsPackageData.PackageFile = "$packageFileName"
        $xmlDoc.PvsPackageData.SolutionAnchorName = "$solutionAnchorName"

        Write-Host "Setting StartDate as $todayDate and EndDate as $futureDate and PackageFile as $packageFileName and SolutionAnchorName as $solutionAnchorName"
        $xmlDoc.save("$inputFilePath")
    }
    else{
        Write-Host "Input.xml unavailable at - $inputFilePath"
    }
  displayName: "Update InputFile from AppSourceAssets"
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'))

- pwsh: |
    $projectPath = "${{parameters.parAppSourcePackageProjectPath}}"
    $appSourcePackageProjectPath = "$(Build.SourcesDirectory)\$(Build.Repository.Name)\$projectPath"
    $appSourceAssetsPath = "$appSourcePackageProjectPath\AppSourceAssets"
    $appSourcePackagePath = "$(Agent.BuildDirectory)"
    $appSourcePackageFolderName = "AppsourcePackage"

    # Create a new folder in Destination
    if(!(Test-Path "$appSourcePackagePath\$appSourcePackageFolderName")){
        Write-Host "Creating a new folder $appSourcePackageFolderName under $appSourcePackagePath"
        New-Item -Path "$appSourcePackagePath" -Name "$appSourcePackageFolderName" -ItemType "directory"
    }

    $destinationPath = "$appSourcePackagePath\$appSourcePackageFolderName\$releaseZipName"
    if(Test-Path "$appSourceAssetsPath")
    {
        if(Test-Path "$appSourcePackagePath\$appSourcePackageFolderName"){
            Write-Host "Packaging assets from $appSourceAssetsPath and creating $destinationPath"
            Compress-Archive -Path "$appSourceAssetsPath\*" -CompressionLevel Optimal -DestinationPath "$destinationPath" -Force
        }
        else{
            Write-Host "Invalid appSourcePackagePath path - $appSourcePackagePath\$appSourcePackageFolderName"
        }
    }
    else{
        Write-Host "Invalid appSourceAssetsPath path - $appSourceAssetsPath" 
    }
  displayName: "Compress and move AppSourceAssets to AppsourcePackage"
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'))

- pwsh: |
    if(Test-Path "$(Agent.BuildDirectory)\AppsourcePackage"){
        Get-ChildItem "$(Agent.BuildDirectory)\AppsourcePackage" -Recurse
    }
    else{
        Write-Host "Invalid path (Agent.BuildDirectory)\AppsourcePackage"
    }
  displayName: 'Print AppsourcePackage'
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'))

- pwsh: |
    Write-Host "AppSourceReleasePackageName - " $(appSourceReleasePackageName)
    $sourceDirectory  = "$(Agent.BuildDirectory)\AppsourcePackage\$(appSourceReleasePackageName)"
    $destinationDirectory = "$(Build.ArtifactStagingDirectory)"
    If(Test-Path "$sourceDirectory"){
        Copy-item -Force -Recurse -Verbose "$sourceDirectory" -Destination $destinationDirectory
    }
    else{
        Write-Host "AppsourcePackage Folder unavailable - $sourceDirectory"
    }
  displayName: 'Copy AppsourcePackage to ArtifactStagingDirectory'
  condition: and(succeeded(), eq(variables['AppSourcePackageFound'], 'true'))